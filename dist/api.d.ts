/**
 * FLECS Daemon API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import type { RequestArgs } from './base';
import { BaseAPI } from './base';
/**
 * Additional info
 * @export
 * @interface AdditionalInfo
 */
export interface AdditionalInfo {
    /**
     *
     * @type {string}
     * @memberof AdditionalInfo
     */
    'additionalInfo': string;
}
/**
 * Instance of an App
 * @export
 * @interface AppInstance
 */
export interface AppInstance {
    /**
     *
     * @type {string}
     * @memberof AppInstance
     */
    'instanceId': string;
    /**
     * Instance name
     * @type {string}
     * @memberof AppInstance
     */
    'instanceName': string;
    /**
     *
     * @type {AppKey}
     * @memberof AppInstance
     */
    'appKey': AppKey;
    /**
     *
     * @type {InstanceStatus}
     * @memberof AppInstance
     */
    'status': InstanceStatus;
    /**
     *
     * @type {InstanceStatus}
     * @memberof AppInstance
     */
    'desired': InstanceStatus;
    /**
     *
     * @type {Array<InstanceEditor>}
     * @memberof AppInstance
     */
    'editors'?: Array<InstanceEditor>;
}
/**
 *
 * @export
 * @interface AppKey
 */
export interface AppKey {
    /**
     *
     * @type {string}
     * @memberof AppKey
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof AppKey
     */
    'version': string;
}
/**
 * @type AppManifest
 * Schema for the FLECS App Manifest
 * @export
 */
export type AppManifest = AppManifestOneOf | AppManifestOneOf1;
/**
 *
 * @export
 * @interface AppManifestOneOf
 */
export interface AppManifestOneOf {
    /**
     * Location of the JSON schema to validate against
     * @type {string}
     * @memberof AppManifestOneOf
     */
    '$schema'?: string;
    /**
     * Version of the implemented FLECS App Manifest schema
     * @type {string}
     * @memberof AppManifestOneOf
     */
    '_schemaVersion': string;
    /**
     * Minimum FLECS version needed for the app
     * @type {string}
     * @memberof AppManifestOneOf
     */
    '_minimumFlecsVersion'?: string;
    /**
     * Unique App identifier in reverse domain name notation
     * @type {string}
     * @memberof AppManifestOneOf
     */
    'app': string;
    /**
     * App version, naturally sortable
     * @type {string}
     * @memberof AppManifestOneOf
     */
    'version': string;
    /**
     * App manifest revision. Increment if Manifest is changed within the same App version
     * @type {string}
     * @memberof AppManifestOneOf
     */
    'revision'?: string;
    /**
     * Docker image for the App
     * @type {string}
     * @memberof AppManifestOneOf
     */
    'image': string;
    /**
     * \'true\' if App can be instantiated more than once (requires no editor, no ports)
     * @type {boolean}
     * @memberof AppManifestOneOf
     */
    'multiInstance'?: boolean;
    /**
     * Set of web-based UIs of the app
     * @type {Array<AppManifestOneOfEditorsInner>}
     * @memberof AppManifestOneOf
     */
    'editors'?: Array<AppManifestOneOfEditorsInner>;
    /**
     * Command line arguments passed to App entrypoint
     * @type {Array<string>}
     * @memberof AppManifestOneOf
     */
    'args'?: Array<string>;
    /**
     * Permissions required for the App to function correctly
     * @type {Set<string>}
     * @memberof AppManifestOneOf
     */
    'capabilities'?: Set<AppManifestOneOfCapabilitiesEnum>;
    /**
     * Configuration files used by the App
     * @type {Array<string>}
     * @memberof AppManifestOneOf
     */
    'conffiles'?: Array<string>;
    /**
     * Devices passed through to the App instances
     * @type {Array<string>}
     * @memberof AppManifestOneOf
     */
    'devices'?: Array<string>;
    /**
     * Environment variables for the App instances
     * @type {Array<string>}
     * @memberof AppManifestOneOf
     */
    'env'?: Array<string>;
    /**
     * DEPRECATED: true if App requires allocation of an interactive shell
     * @type {boolean}
     * @memberof AppManifestOneOf
     * @deprecated
     */
    'interactive'?: boolean;
    /**
     * Port mappings for the App\'s instances (not allowed for multiInstance Apps)
     * @type {Array<string>}
     * @memberof AppManifestOneOf
     */
    'ports'?: Array<string>;
    /**
     * Virtual volumes and bind mounts for an App\'s instances
     * @type {Array<string>}
     * @memberof AppManifestOneOf
     */
    'volumes'?: Array<string>;
    /**
     * Labels for the App instances
     * @type {Array<string>}
     * @memberof AppManifestOneOf
     */
    'labels'?: Array<string>;
    /**
     * DEPRECATED: hostname of the started app, using this with multiInstance = true will cause problems
     * @type {string}
     * @memberof AppManifestOneOf
     * @deprecated
     */
    'hostname'?: string;
}
export declare const AppManifestOneOfCapabilitiesEnum: {
    readonly Docker: "DOCKER";
    readonly NetAdmin: "NET_ADMIN";
    readonly SysNice: "SYS_NICE";
    readonly IpcLock: "IPC_LOCK";
    readonly NetRaw: "NET_RAW";
};
export type AppManifestOneOfCapabilitiesEnum = typeof AppManifestOneOfCapabilitiesEnum[keyof typeof AppManifestOneOfCapabilitiesEnum];
/**
 *
 * @export
 * @interface AppManifestOneOf1
 */
export interface AppManifestOneOf1 {
    /**
     * Location of the JSON schema to validate against
     * @type {string}
     * @memberof AppManifestOneOf1
     */
    '$schema'?: string;
    /**
     * Version of the implemented FLECS App Manifest schema
     * @type {string}
     * @memberof AppManifestOneOf1
     */
    '_schemaVersion': string;
    /**
     * Minimum FLECS version needed for the app
     * @type {string}
     * @memberof AppManifestOneOf1
     */
    '_minimumFlecsVersion'?: string;
    /**
     * Unique App identifier in reverse domain name notation
     * @type {string}
     * @memberof AppManifestOneOf1
     */
    'app': string;
    /**
     * App version, naturally sortable
     * @type {string}
     * @memberof AppManifestOneOf1
     */
    'version': string;
    /**
     * App manifest revision. Increment if Manifest is changed within the same App version
     * @type {string}
     * @memberof AppManifestOneOf1
     */
    'revision'?: string;
    /**
     *
     * @type {AppManifestOneOf1Deployment}
     * @memberof AppManifestOneOf1
     */
    'deployment': AppManifestOneOf1Deployment;
}
/**
 * Method of deploying the App through FLECS
 * @export
 * @interface AppManifestOneOf1Deployment
 */
export interface AppManifestOneOf1Deployment {
    /**
     *
     * @type {AppManifestOneOf1DeploymentCompose}
     * @memberof AppManifestOneOf1Deployment
     */
    'compose': AppManifestOneOf1DeploymentCompose;
}
/**
 *
 * @export
 * @interface AppManifestOneOf1DeploymentCompose
 */
export interface AppManifestOneOf1DeploymentCompose {
    /**
     * docker-compose.yml file converted to JSON
     * @type {object}
     * @memberof AppManifestOneOf1DeploymentCompose
     */
    'yaml'?: object;
}
/**
 *
 * @export
 * @interface AppManifestOneOfEditorsInner
 */
export interface AppManifestOneOfEditorsInner {
    /**
     *
     * @type {string}
     * @memberof AppManifestOneOfEditorsInner
     */
    'name': string;
    /**
     * Port on which the editor is reachable on the docker container
     * @type {number}
     * @memberof AppManifestOneOfEditorsInner
     */
    'port': number;
    /**
     *
     * @type {boolean}
     * @memberof AppManifestOneOfEditorsInner
     */
    'supportsReverseProxy'?: boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const AppStatus: {
    readonly NotInstalled: "not installed";
    readonly ManifestDownloaded: "manifest downloaded";
    readonly TokenAcquired: "token acquired";
    readonly ImageDownloaded: "image downloaded";
    readonly Installed: "installed";
    readonly Removed: "removed";
    readonly Purged: "purged";
    readonly Orphaned: "orphaned";
    readonly Unknown: "unknown";
};
export type AppStatus = typeof AppStatus[keyof typeof AppStatus];
/**
 *
 * @export
 * @interface AppsInstallPostRequest
 */
export interface AppsInstallPostRequest {
    /**
     *
     * @type {AppKey}
     * @memberof AppsInstallPostRequest
     */
    'appKey': AppKey;
}
/**
 *
 * @export
 * @interface AppsSideloadPostRequest
 */
export interface AppsSideloadPostRequest {
    /**
     *
     * @type {string}
     * @memberof AppsSideloadPostRequest
     */
    'manifest': string;
}
/**
 *
 * @export
 * @interface AuthResponseData
 */
export interface AuthResponseData {
    /**
     *
     * @type {User}
     * @memberof AuthResponseData
     */
    'user': User;
    /**
     *
     * @type {Jwt}
     * @memberof AuthResponseData
     */
    'jwt': Jwt;
    /**
     *
     * @type {FeatureFlags}
     * @memberof AuthResponseData
     */
    'feature_flags': FeatureFlags;
}
/**
 *
 * @export
 * @interface BindMount
 */
export interface BindMount {
    /**
     *
     * @type {string}
     * @memberof BindMount
     */
    'container': string;
    /**
     *
     * @type {string}
     * @memberof BindMount
     */
    'host': string;
}
/**
 * Device Onboarding Service Manifest
 * @export
 * @interface DOSManifest
 */
export interface DOSManifest {
    /**
     *
     * @type {string}
     * @memberof DOSManifest
     */
    '_schemaVersion': string;
    /**
     *
     * @type {string}
     * @memberof DOSManifest
     */
    'time': string;
    /**
     *
     * @type {Set<DOSManifestAppsInner>}
     * @memberof DOSManifest
     */
    'apps': Set<DOSManifestAppsInner>;
}
/**
 *
 * @export
 * @interface DOSManifestAppsInner
 */
export interface DOSManifestAppsInner {
    /**
     *
     * @type {string}
     * @memberof DOSManifestAppsInner
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof DOSManifestAppsInner
     */
    'version'?: string;
}
/**
 *
 * @export
 * @interface DeploymentNetwork
 */
export interface DeploymentNetwork {
    /**
     *
     * @type {string}
     * @memberof DeploymentNetwork
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof DeploymentNetwork
     */
    'driver'?: string;
    /**
     *
     * @type {Ipam}
     * @memberof DeploymentNetwork
     */
    'ipam'?: Ipam;
    /**
     *
     * @type {string}
     * @memberof DeploymentNetwork
     */
    'parent'?: string;
}
/**
 *
 * @export
 * @interface DeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post200Response
 */
export interface DeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post200Response {
    /**
     *
     * @type {string}
     * @memberof DeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post200Response
     */
    'ipv4_address': string;
}
/**
 *
 * @export
 * @interface DeviceLicenseActivationStatusGet200Response
 */
export interface DeviceLicenseActivationStatusGet200Response {
    /**
     *
     * @type {boolean}
     * @memberof DeviceLicenseActivationStatusGet200Response
     */
    'isValid': boolean;
}
/**
 *
 * @export
 * @interface DeviceLicenseInfoGet200Response
 */
export interface DeviceLicenseInfoGet200Response {
    /**
     *
     * @type {string}
     * @memberof DeviceLicenseInfoGet200Response
     */
    'type': string;
    /**
     *
     * @type {string}
     * @memberof DeviceLicenseInfoGet200Response
     */
    'license'?: string;
    /**
     *
     * @type {SessionId}
     * @memberof DeviceLicenseInfoGet200Response
     */
    'sessionId'?: SessionId;
}
/**
 *
 * @export
 * @interface Devices
 */
export interface Devices {
    /**
     *
     * @type {Array<UsbDevice>}
     * @memberof Devices
     */
    'usb'?: Array<UsbDevice>;
}
/**
 *
 * @export
 * @interface ExportRequest
 */
export interface ExportRequest {
    /**
     *
     * @type {Array<AppKey>}
     * @memberof ExportRequest
     */
    'apps': Array<AppKey>;
    /**
     *
     * @type {Array<string>}
     * @memberof ExportRequest
     */
    'instances'?: Array<string>;
}
/**
 *
 * @export
 * @interface FeatureFlags
 */
export interface FeatureFlags {
    /**
     *
     * @type {boolean}
     * @memberof FeatureFlags
     */
    'isVendor': boolean;
    /**
     *
     * @type {boolean}
     * @memberof FeatureFlags
     */
    'isWhitelabeled': boolean;
}
/**
 *
 * @export
 * @interface InstalledApp
 */
export interface InstalledApp {
    /**
     *
     * @type {AppKey}
     * @memberof InstalledApp
     */
    'appKey': AppKey;
    /**
     *
     * @type {AppStatus}
     * @memberof InstalledApp
     */
    'status': AppStatus;
    /**
     *
     * @type {AppStatus}
     * @memberof InstalledApp
     */
    'desired': AppStatus;
    /**
     *
     * @type {number}
     * @memberof InstalledApp
     */
    'installedSize': number;
    /**
     *
     * @type {boolean}
     * @memberof InstalledApp
     */
    'multiInstance': boolean;
}
/**
 *
 * @export
 * @interface InstanceConfigNetwork
 */
export interface InstanceConfigNetwork {
    /**
     *
     * @type {string}
     * @memberof InstanceConfigNetwork
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof InstanceConfigNetwork
     */
    'ipAddress': string;
}
/**
 *
 * @export
 * @interface InstanceConfigUsbDevice
 */
export interface InstanceConfigUsbDevice {
    /**
     *
     * @type {string}
     * @memberof InstanceConfigUsbDevice
     */
    'port': string;
    /**
     *
     * @type {string}
     * @memberof InstanceConfigUsbDevice
     */
    'name'?: string;
    /**
     *
     * @type {number}
     * @memberof InstanceConfigUsbDevice
     */
    'pid'?: number;
    /**
     *
     * @type {string}
     * @memberof InstanceConfigUsbDevice
     */
    'vendor'?: string;
    /**
     *
     * @type {number}
     * @memberof InstanceConfigUsbDevice
     */
    'vid'?: number;
    /**
     *
     * @type {boolean}
     * @memberof InstanceConfigUsbDevice
     */
    'device_connected': boolean;
}
/**
 *
 * @export
 * @interface InstanceDetailConfigFile
 */
export interface InstanceDetailConfigFile {
    /**
     *
     * @type {string}
     * @memberof InstanceDetailConfigFile
     */
    'container': string;
    /**
     *
     * @type {string}
     * @memberof InstanceDetailConfigFile
     */
    'host': string;
}
/**
 * Bind mounts of an instance
 * @export
 * @interface InstanceDetailMounts
 */
export interface InstanceDetailMounts {
    /**
     *
     * @type {Array<InstanceDetailMountsMountsInner>}
     * @memberof InstanceDetailMounts
     */
    'mounts': Array<InstanceDetailMountsMountsInner>;
}
/**
 *
 * @export
 * @interface InstanceDetailMountsMountsInner
 */
export interface InstanceDetailMountsMountsInner {
    /**
     *
     * @type {string}
     * @memberof InstanceDetailMountsMountsInner
     */
    'container': string;
    /**
     *
     * @type {string}
     * @memberof InstanceDetailMountsMountsInner
     */
    'host': string;
}
/**
 *
 * @export
 * @interface InstanceDetailPort
 */
export interface InstanceDetailPort {
    /**
     *
     * @type {string}
     * @memberof InstanceDetailPort
     */
    'container': string;
    /**
     *
     * @type {string}
     * @memberof InstanceDetailPort
     */
    'host': string;
}
/**
 *
 * @export
 * @interface InstanceDetailVolume
 */
export interface InstanceDetailVolume {
    /**
     *
     * @type {string}
     * @memberof InstanceDetailVolume
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof InstanceDetailVolume
     */
    'path': string;
}
/**
 *
 * @export
 * @interface InstanceEditor
 */
export interface InstanceEditor {
    /**
     * Descriptive name of the editor
     * @type {string}
     * @memberof InstanceEditor
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof InstanceEditor
     */
    'port': number;
    /**
     * Prefix that should be shown in the url path of the editor
     * @type {string}
     * @memberof InstanceEditor
     */
    'path_prefix'?: string;
    /**
     * Link to the editor of an instance
     * @type {string}
     * @memberof InstanceEditor
     */
    'url': string;
}
/**
 *
 * @export
 * @interface InstanceEnvironmentVariable
 */
export interface InstanceEnvironmentVariable {
    /**
     *
     * @type {string}
     * @memberof InstanceEnvironmentVariable
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof InstanceEnvironmentVariable
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface InstanceLabel
 */
export interface InstanceLabel {
    /**
     *
     * @type {string}
     * @memberof InstanceLabel
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof InstanceLabel
     */
    'value'?: string;
}
/**
 * @type InstancePortMapping
 * @export
 */
export type InstancePortMapping = InstancePortMappingRange | InstancePortMappingSingle;
/**
 *
 * @export
 * @interface InstancePortMappingRange
 */
export interface InstancePortMappingRange {
    /**
     *
     * @type {PortRange}
     * @memberof InstancePortMappingRange
     */
    'host_ports': PortRange;
    /**
     *
     * @type {PortRange}
     * @memberof InstancePortMappingRange
     */
    'container_ports': PortRange;
}
/**
 *
 * @export
 * @interface InstancePortMappingSingle
 */
export interface InstancePortMappingSingle {
    /**
     *
     * @type {number}
     * @memberof InstancePortMappingSingle
     */
    'host_port': number;
    /**
     *
     * @type {number}
     * @memberof InstancePortMappingSingle
     */
    'container_port': number;
}
/**
 *
 * @export
 * @interface InstancePorts
 */
export interface InstancePorts {
    /**
     *
     * @type {Array<InstancePortMapping>}
     * @memberof InstancePorts
     */
    'tcp': Array<InstancePortMapping>;
    /**
     *
     * @type {Array<InstancePortMapping>}
     * @memberof InstancePorts
     */
    'udp': Array<InstancePortMapping>;
    /**
     *
     * @type {Array<InstancePortMapping>}
     * @memberof InstancePorts
     */
    'sctp': Array<InstancePortMapping>;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const InstanceStatus: {
    readonly NotCreated: "not created";
    readonly Requested: "requested";
    readonly ResourcesReady: "resources ready";
    readonly Created: "created";
    readonly Stopped: "stopped";
    readonly Running: "running";
    readonly Orphaned: "orphaned";
    readonly Unknown: "unknown";
};
export type InstanceStatus = typeof InstanceStatus[keyof typeof InstanceStatus];
/**
 *
 * @export
 * @interface InstancesCreatePostRequest
 */
export interface InstancesCreatePostRequest {
    /**
     *
     * @type {AppKey}
     * @memberof InstancesCreatePostRequest
     */
    'appKey': AppKey;
    /**
     * Instance name
     * @type {string}
     * @memberof InstancesCreatePostRequest
     */
    'instanceName'?: string;
}
/**
 *
 * @export
 * @interface InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest
 */
export interface InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest
     */
    'path_prefix': string;
}
/**
 *
 * @export
 * @interface InstancesInstanceIdConfigEnvironmentVariableNameGet200Response
 */
export interface InstancesInstanceIdConfigEnvironmentVariableNameGet200Response {
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdConfigEnvironmentVariableNameGet200Response
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface InstancesInstanceIdConfigLabelsLabelNameGet200Response
 */
export interface InstancesInstanceIdConfigLabelsLabelNameGet200Response {
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdConfigLabelsLabelNameGet200Response
     */
    'value'?: string;
}
/**
 *
 * @export
 * @interface InstancesInstanceIdConfigNetworksPostRequest
 */
export interface InstancesInstanceIdConfigNetworksPostRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdConfigNetworksPostRequest
     */
    'network_id': string;
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdConfigNetworksPostRequest
     */
    'ipAddress'?: string;
}
/**
 * @type InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest
 * @export
 */
export type InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest = PortRange | number;
/**
 *
 * @export
 * @interface InstancesInstanceIdGet200Response
 */
export interface InstancesInstanceIdGet200Response {
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdGet200Response
     */
    'instanceId': string;
    /**
     * Instance name
     * @type {string}
     * @memberof InstancesInstanceIdGet200Response
     */
    'instanceName': string;
    /**
     *
     * @type {AppKey}
     * @memberof InstancesInstanceIdGet200Response
     */
    'appKey': AppKey;
    /**
     *
     * @type {InstanceStatus}
     * @memberof InstancesInstanceIdGet200Response
     */
    'status': InstanceStatus;
    /**
     *
     * @type {InstanceStatus}
     * @memberof InstancesInstanceIdGet200Response
     */
    'desired': InstanceStatus;
    /**
     *
     * @type {Array<InstanceDetailConfigFile>}
     * @memberof InstancesInstanceIdGet200Response
     */
    'configFiles': Array<InstanceDetailConfigFile>;
    /**
     * Hostname of an instance
     * @type {string}
     * @memberof InstancesInstanceIdGet200Response
     */
    'hostname': string;
    /**
     * IP address of an instance
     * @type {string}
     * @memberof InstancesInstanceIdGet200Response
     */
    'ipAddress': string;
    /**
     * Allocated network ports of an instance
     * @type {Array<InstanceDetailPort>}
     * @memberof InstancesInstanceIdGet200Response
     */
    'ports': Array<InstanceDetailPort>;
    /**
     * Automatic volumes of an instance
     * @type {Array<InstanceDetailVolume>}
     * @memberof InstancesInstanceIdGet200Response
     */
    'volumes': Array<InstanceDetailVolume>;
    /**
     *
     * @type {Array<InstanceEditor>}
     * @memberof InstancesInstanceIdGet200Response
     */
    'editors'?: Array<InstanceEditor>;
}
/**
 *
 * @export
 * @interface InstancesInstanceIdLogsGet200Response
 */
export interface InstancesInstanceIdLogsGet200Response {
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdLogsGet200Response
     */
    'stdout': string;
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdLogsGet200Response
     */
    'stderr': string;
}
/**
 *
 * @export
 * @interface InstancesInstanceIdPatchRequest
 */
export interface InstancesInstanceIdPatchRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesInstanceIdPatchRequest
     */
    'to': string;
}
/**
 *
 * @export
 * @interface Ipam
 */
export interface Ipam {
    /**
     *
     * @type {Ipv4Ipam}
     * @memberof Ipam
     */
    'ipv4'?: Ipv4Ipam;
}
/**
 *
 * @export
 * @interface Ipv4Ipam
 */
export interface Ipv4Ipam {
    /**
     *
     * @type {string}
     * @memberof Ipv4Ipam
     */
    'address': string;
    /**
     *
     * @type {string}
     * @memberof Ipv4Ipam
     */
    'netmask': string;
    /**
     *
     * @type {string}
     * @memberof Ipv4Ipam
     */
    'gateway'?: string;
}
/**
 *
 * @export
 * @interface Ipv4Network
 */
export interface Ipv4Network {
    /**
     *
     * @type {string}
     * @memberof Ipv4Network
     */
    'address': string;
    /**
     *
     * @type {string}
     * @memberof Ipv4Network
     */
    'netmask': string;
}
/**
 *
 * @export
 * @interface Ipv6Network
 */
export interface Ipv6Network {
    /**
     *
     * @type {string}
     * @memberof Ipv6Network
     */
    'address': string;
    /**
     *
     * @type {number}
     * @memberof Ipv6Network
     */
    'prefix_len': number;
}
/**
 *
 * @export
 * @interface Job
 */
export interface Job {
    /**
     *
     * @type {number}
     * @memberof Job
     */
    'id': number;
    /**
     *
     * @type {JobStatus}
     * @memberof Job
     */
    'status': JobStatus;
    /**
     *
     * @type {string}
     * @memberof Job
     */
    'description': string;
    /**
     *
     * @type {number}
     * @memberof Job
     */
    'numSteps': number;
    /**
     *
     * @type {JobStep}
     * @memberof Job
     */
    'currentStep': JobStep;
    /**
     *
     * @type {JobResult}
     * @memberof Job
     */
    'result': JobResult;
}
/**
 * Job metadata for accepted requests
 * @export
 * @interface JobMeta
 */
export interface JobMeta {
    /**
     *
     * @type {number}
     * @memberof JobMeta
     */
    'jobId': number;
}
/**
 *
 * @export
 * @interface JobResult
 */
export interface JobResult {
    /**
     *
     * @type {number}
     * @memberof JobResult
     */
    'code': number;
    /**
     *
     * @type {string}
     * @memberof JobResult
     */
    'message': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const JobStatus: {
    readonly Pending: "pending";
    readonly Queued: "queued";
    readonly Running: "running";
    readonly Cancelled: "cancelled";
    readonly Successful: "successful";
    readonly Failed: "failed";
    readonly Unknown: "unknown";
};
export type JobStatus = typeof JobStatus[keyof typeof JobStatus];
/**
 *
 * @export
 * @interface JobStep
 */
export interface JobStep {
    /**
     *
     * @type {string}
     * @memberof JobStep
     */
    'description': string;
    /**
     *
     * @type {number}
     * @memberof JobStep
     */
    'num': number;
    /**
     *
     * @type {number}
     * @memberof JobStep
     */
    'unit': number;
    /**
     *
     * @type {number}
     * @memberof JobStep
     */
    'unitsTotal': number;
    /**
     *
     * @type {number}
     * @memberof JobStep
     */
    'unitsDone': number;
    /**
     *
     * @type {number}
     * @memberof JobStep
     */
    'rate': number;
}
/**
 *
 * @export
 * @interface Jwt
 */
export interface Jwt {
    /**
     *
     * @type {string}
     * @memberof Jwt
     */
    'token': string;
    /**
     *
     * @type {number}
     * @memberof Jwt
     */
    'token_expires': number;
}
/**
 *
 * @export
 * @interface Mounts
 */
export interface Mounts {
    /**
     *
     * @type {Array<BindMount>}
     * @memberof Mounts
     */
    'bind_mounts'?: Array<BindMount>;
    /**
     *
     * @type {Array<InstanceDetailVolume>}
     * @memberof Mounts
     */
    'volume_mounts'?: Array<InstanceDetailVolume>;
}
/**
 * @type Network
 * @export
 */
export type Network = Ipv4Network | Ipv6Network;
/**
 *
 * @export
 * @interface NetworkAdapter
 */
export interface NetworkAdapter {
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'name': string;
    /**
     *
     * @type {Array<string>}
     * @memberof NetworkAdapter
     */
    'ipv4_addresses'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof NetworkAdapter
     */
    'ipv6_addresses'?: Array<string>;
    /**
     *
     * @type {Array<Network>}
     * @memberof NetworkAdapter
     */
    'networks'?: Array<Network>;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'gateway'?: string;
    /**
     *
     * @type {string}
     * @memberof NetworkAdapter
     */
    'mac_address'?: string;
    /**
     *
     * @type {NetworkType}
     * @memberof NetworkAdapter
     */
    'net_type': NetworkType;
    /**
     *
     * @type {boolean}
     * @memberof NetworkAdapter
     */
    'is_connected': boolean;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const NetworkKind: {
    readonly Internal: "internal";
    readonly Bridge: "bridge";
    readonly Macvlan: "macvlan";
    readonly Ipvlanl2: "ipvlanl2";
    readonly Ipvlanl3: "ipvlanl3";
};
export type NetworkKind = typeof NetworkKind[keyof typeof NetworkKind];
/**
 *
 * @export
 * @enum {string}
 */
export declare const NetworkType: {
    readonly Unknown: "unknown";
    readonly Wired: "wired";
    readonly Wireless: "wireless";
    readonly Local: "local";
    readonly Bridge: "bridge";
    readonly Virtual: "virtual";
};
export type NetworkType = typeof NetworkType[keyof typeof NetworkType];
/**
 * Additional info
 * @export
 * @interface OptionalAdditionalInfo
 */
export interface OptionalAdditionalInfo {
    /**
     *
     * @type {string}
     * @memberof OptionalAdditionalInfo
     */
    'additionalInfo'?: string;
}
/**
 *
 * @export
 * @interface PortRange
 */
export interface PortRange {
    /**
     *
     * @type {number}
     * @memberof PortRange
     */
    'start': number;
    /**
     *
     * @type {number}
     * @memberof PortRange
     */
    'end': number;
}
/**
 *
 * @export
 * @interface PostDeploymentNetwork
 */
export interface PostDeploymentNetwork {
    /**
     *
     * @type {string}
     * @memberof PostDeploymentNetwork
     */
    'network_id': string;
    /**
     *
     * @type {NetworkKind}
     * @memberof PostDeploymentNetwork
     */
    'network_kind': NetworkKind;
    /**
     *
     * @type {{ [key: string]: string; }}
     * @memberof PostDeploymentNetwork
     */
    'options'?: {
        [key: string]: string;
    };
    /**
     *
     * @type {string}
     * @memberof PostDeploymentNetwork
     */
    'parent_adapter'?: string;
    /**
     *
     * @type {Ipam}
     * @memberof PostDeploymentNetwork
     */
    'ipam'?: Ipam;
}
/**
 *
 * @export
 * @interface SessionId
 */
export interface SessionId {
    /**
     *
     * @type {string}
     * @memberof SessionId
     */
    'id'?: string;
    /**
     *
     * @type {number}
     * @memberof SessionId
     */
    'timestamp'?: number;
}
/**
 *
 * @export
 * @interface SystemDistro
 */
export interface SystemDistro {
    /**
     *
     * @type {string}
     * @memberof SystemDistro
     */
    'codename': string;
    /**
     *
     * @type {string}
     * @memberof SystemDistro
     */
    'id': string;
    /**
     *
     * @type {string}
     * @memberof SystemDistro
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof SystemDistro
     */
    'version': string;
}
/**
 *
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
    /**
     *
     * @type {string}
     * @memberof SystemInfo
     */
    'arch': string;
    /**
     *
     * @type {SystemDistro}
     * @memberof SystemInfo
     */
    'distro': SystemDistro;
    /**
     *
     * @type {SystemKernel}
     * @memberof SystemInfo
     */
    'kernel': SystemKernel;
    /**
     *
     * @type {string}
     * @memberof SystemInfo
     */
    'platform': string;
}
/**
 *
 * @export
 * @interface SystemKernel
 */
export interface SystemKernel {
    /**
     *
     * @type {string}
     * @memberof SystemKernel
     */
    'build': string;
    /**
     *
     * @type {string}
     * @memberof SystemKernel
     */
    'machine': string;
    /**
     *
     * @type {string}
     * @memberof SystemKernel
     */
    'version': string;
}
/**
 *
 * @export
 * @interface SystemVersionGet200Response
 */
export interface SystemVersionGet200Response {
    /**
     *
     * @type {string}
     * @memberof SystemVersionGet200Response
     */
    'api': string;
    /**
     *
     * @type {string}
     * @memberof SystemVersionGet200Response
     */
    'core': string;
}
/**
 *
 * @export
 * @enum {string}
 */
export declare const TransportProtocol: {
    readonly Tcp: "tcp";
    readonly Udp: "udp";
    readonly Sctp: "sctp";
};
export type TransportProtocol = typeof TransportProtocol[keyof typeof TransportProtocol];
/**
 *
 * @export
 * @interface UsbDevice
 */
export interface UsbDevice {
    /**
     *
     * @type {string}
     * @memberof UsbDevice
     */
    'name': string;
    /**
     *
     * @type {number}
     * @memberof UsbDevice
     */
    'pid': number;
    /**
     *
     * @type {string}
     * @memberof UsbDevice
     */
    'port': string;
    /**
     *
     * @type {string}
     * @memberof UsbDevice
     */
    'vendor': string;
    /**
     *
     * @type {number}
     * @memberof UsbDevice
     */
    'vid': number;
}
/**
 *
 * @export
 * @interface User
 */
export interface User {
    /**
     *
     * @type {number}
     * @memberof User
     */
    'ID': number;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'user_email': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'user_login': string;
    /**
     *
     * @type {string}
     * @memberof User
     */
    'display_name': string;
}
/**
 * AppsApi - axios parameter creator
 * @export
 */
export declare const AppsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Uninstall one or all versions an App
     * @param {string} app
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsAppDelete: (app: string, version?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Query all versions or specific versions of an App
     * @param {string} app
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsAppGet: (app: string, version?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Query installed Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Install an App from the FLECS marketplace
     * @param {AppsInstallPostRequest} appsInstallPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsInstallPost: (appsInstallPostRequest: AppsInstallPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Sideload an App from its manifest
     * @param {AppsSideloadPostRequest} appsSideloadPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsSideloadPost: (appsSideloadPostRequest: AppsSideloadPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AppsApi - functional programming interface
 * @export
 */
export declare const AppsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Uninstall one or all versions an App
     * @param {string} app
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsAppDelete(app: string, version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
    /**
     *
     * @summary Query all versions or specific versions of an App
     * @param {string} app
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsAppGet(app: string, version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstalledApp>>>;
    /**
     *
     * @summary Query installed Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstalledApp>>>;
    /**
     *
     * @summary Install an App from the FLECS marketplace
     * @param {AppsInstallPostRequest} appsInstallPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsInstallPost(appsInstallPostRequest: AppsInstallPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
    /**
     *
     * @summary Sideload an App from its manifest
     * @param {AppsSideloadPostRequest} appsSideloadPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsSideloadPost(appsSideloadPostRequest: AppsSideloadPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
};
/**
 * AppsApi - factory interface
 * @export
 */
export declare const AppsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Uninstall one or all versions an App
     * @param {AppsApiAppsAppDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsAppDelete(requestParameters: AppsApiAppsAppDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
    /**
     *
     * @summary Query all versions or specific versions of an App
     * @param {AppsApiAppsAppGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsAppGet(requestParameters: AppsApiAppsAppGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<InstalledApp>>;
    /**
     *
     * @summary Query installed Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<InstalledApp>>;
    /**
     *
     * @summary Install an App from the FLECS marketplace
     * @param {AppsApiAppsInstallPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsInstallPost(requestParameters: AppsApiAppsInstallPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
    /**
     *
     * @summary Sideload an App from its manifest
     * @param {AppsApiAppsSideloadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    appsSideloadPost(requestParameters: AppsApiAppsSideloadPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
};
/**
 * Request parameters for appsAppDelete operation in AppsApi.
 * @export
 * @interface AppsApiAppsAppDeleteRequest
 */
export interface AppsApiAppsAppDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof AppsApiAppsAppDelete
     */
    readonly app: string;
    /**
     *
     * @type {string}
     * @memberof AppsApiAppsAppDelete
     */
    readonly version?: string;
}
/**
 * Request parameters for appsAppGet operation in AppsApi.
 * @export
 * @interface AppsApiAppsAppGetRequest
 */
export interface AppsApiAppsAppGetRequest {
    /**
     *
     * @type {string}
     * @memberof AppsApiAppsAppGet
     */
    readonly app: string;
    /**
     *
     * @type {string}
     * @memberof AppsApiAppsAppGet
     */
    readonly version?: string;
}
/**
 * Request parameters for appsInstallPost operation in AppsApi.
 * @export
 * @interface AppsApiAppsInstallPostRequest
 */
export interface AppsApiAppsInstallPostRequest {
    /**
     *
     * @type {AppsInstallPostRequest}
     * @memberof AppsApiAppsInstallPost
     */
    readonly appsInstallPostRequest: AppsInstallPostRequest;
}
/**
 * Request parameters for appsSideloadPost operation in AppsApi.
 * @export
 * @interface AppsApiAppsSideloadPostRequest
 */
export interface AppsApiAppsSideloadPostRequest {
    /**
     *
     * @type {AppsSideloadPostRequest}
     * @memberof AppsApiAppsSideloadPost
     */
    readonly appsSideloadPostRequest: AppsSideloadPostRequest;
}
/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
export declare class AppsApi extends BaseAPI {
    /**
     *
     * @summary Uninstall one or all versions an App
     * @param {AppsApiAppsAppDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    appsAppDelete(requestParameters: AppsApiAppsAppDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
    /**
     *
     * @summary Query all versions or specific versions of an App
     * @param {AppsApiAppsAppGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    appsAppGet(requestParameters: AppsApiAppsAppGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstalledApp[], any>>;
    /**
     *
     * @summary Query installed Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    appsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstalledApp[], any>>;
    /**
     *
     * @summary Install an App from the FLECS marketplace
     * @param {AppsApiAppsInstallPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    appsInstallPost(requestParameters: AppsApiAppsInstallPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
    /**
     *
     * @summary Sideload an App from its manifest
     * @param {AppsApiAppsSideloadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    appsSideloadPost(requestParameters: AppsApiAppsSideloadPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
}
/**
 * ConsoleApi - axios parameter creator
 * @export
 */
export declare const ConsoleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Remove the authentication information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consoleAuthenticationDelete: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set the authentication information
     * @param {AuthResponseData} authResponseData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consoleAuthenticationPut: (authResponseData: AuthResponseData, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ConsoleApi - functional programming interface
 * @export
 */
export declare const ConsoleApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Remove the authentication information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consoleAuthenticationDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Set the authentication information
     * @param {AuthResponseData} authResponseData
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consoleAuthenticationPut(authResponseData: AuthResponseData, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ConsoleApi - factory interface
 * @export
 */
export declare const ConsoleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Remove the authentication information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consoleAuthenticationDelete(options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Set the authentication information
     * @param {ConsoleApiConsoleAuthenticationPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    consoleAuthenticationPut(requestParameters: ConsoleApiConsoleAuthenticationPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for consoleAuthenticationPut operation in ConsoleApi.
 * @export
 * @interface ConsoleApiConsoleAuthenticationPutRequest
 */
export interface ConsoleApiConsoleAuthenticationPutRequest {
    /**
     *
     * @type {AuthResponseData}
     * @memberof ConsoleApiConsoleAuthenticationPut
     */
    readonly authResponseData: AuthResponseData;
}
/**
 * ConsoleApi - object-oriented interface
 * @export
 * @class ConsoleApi
 * @extends {BaseAPI}
 */
export declare class ConsoleApi extends BaseAPI {
    /**
     *
     * @summary Remove the authentication information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    consoleAuthenticationDelete(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Set the authentication information
     * @param {ConsoleApiConsoleAuthenticationPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    consoleAuthenticationPut(requestParameters: ConsoleApiConsoleAuthenticationPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * DeploymentsApi - axios parameter creator
 * @export
 */
export declare const DeploymentsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @param {string} deploymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksGet: (deploymentId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} deploymentId
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post: (deploymentId: string, networkId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} deploymentId
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksNetworkIdGet: (deploymentId: string, networkId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {string} deploymentId
     * @param {PostDeploymentNetwork} postDeploymentNetwork
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksPost: (deploymentId: string, postDeploymentNetwork: PostDeploymentNetwork, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeploymentsApi - functional programming interface
 * @export
 */
export declare const DeploymentsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @param {string} deploymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksGet(deploymentId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DeploymentNetwork>>>;
    /**
     *
     * @param {string} deploymentId
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post(deploymentId: string, networkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post200Response>>;
    /**
     *
     * @param {string} deploymentId
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksNetworkIdGet(deploymentId: string, networkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeploymentNetwork>>;
    /**
     *
     * @param {string} deploymentId
     * @param {PostDeploymentNetwork} postDeploymentNetwork
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksPost(deploymentId: string, postDeploymentNetwork: PostDeploymentNetwork, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * DeploymentsApi - factory interface
 * @export
 */
export declare const DeploymentsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksGet(requestParameters: DeploymentsApiDeploymentsDeploymentIdNetworksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<DeploymentNetwork>>;
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post(requestParameters: DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4PostRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post200Response>;
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksNetworkIdGet(requestParameters: DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<DeploymentNetwork>;
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deploymentsDeploymentIdNetworksPost(requestParameters: DeploymentsApiDeploymentsDeploymentIdNetworksPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for deploymentsDeploymentIdNetworksGet operation in DeploymentsApi.
 * @export
 * @interface DeploymentsApiDeploymentsDeploymentIdNetworksGetRequest
 */
export interface DeploymentsApiDeploymentsDeploymentIdNetworksGetRequest {
    /**
     *
     * @type {string}
     * @memberof DeploymentsApiDeploymentsDeploymentIdNetworksGet
     */
    readonly deploymentId: string;
}
/**
 * Request parameters for deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post operation in DeploymentsApi.
 * @export
 * @interface DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4PostRequest
 */
export interface DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4PostRequest {
    /**
     *
     * @type {string}
     * @memberof DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post
     */
    readonly deploymentId: string;
    /**
     *
     * @type {string}
     * @memberof DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post
     */
    readonly networkId: string;
}
/**
 * Request parameters for deploymentsDeploymentIdNetworksNetworkIdGet operation in DeploymentsApi.
 * @export
 * @interface DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGetRequest
 */
export interface DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGet
     */
    readonly deploymentId: string;
    /**
     *
     * @type {string}
     * @memberof DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGet
     */
    readonly networkId: string;
}
/**
 * Request parameters for deploymentsDeploymentIdNetworksPost operation in DeploymentsApi.
 * @export
 * @interface DeploymentsApiDeploymentsDeploymentIdNetworksPostRequest
 */
export interface DeploymentsApiDeploymentsDeploymentIdNetworksPostRequest {
    /**
     *
     * @type {string}
     * @memberof DeploymentsApiDeploymentsDeploymentIdNetworksPost
     */
    readonly deploymentId: string;
    /**
     *
     * @type {PostDeploymentNetwork}
     * @memberof DeploymentsApiDeploymentsDeploymentIdNetworksPost
     */
    readonly postDeploymentNetwork: PostDeploymentNetwork;
}
/**
 * DeploymentsApi - object-oriented interface
 * @export
 * @class DeploymentsApi
 * @extends {BaseAPI}
 */
export declare class DeploymentsApi extends BaseAPI {
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    deploymentsDeploymentIdNetworksGet(requestParameters: DeploymentsApiDeploymentsDeploymentIdNetworksGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeploymentNetwork[], any>>;
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post(requestParameters: DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4PostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post200Response, any>>;
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    deploymentsDeploymentIdNetworksNetworkIdGet(requestParameters: DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeploymentNetwork, any>>;
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    deploymentsDeploymentIdNetworksPost(requestParameters: DeploymentsApiDeploymentsDeploymentIdNetworksPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * DeviceApi - axios parameter creator
 * @export
 */
export declare const DeviceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Execute device activation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseActivationPost: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Check if device is activated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseActivationStatusGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get information about license
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseInfoGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {DOSManifest} dOSManifest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceOnboardingPost: (dOSManifest: DOSManifest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * DeviceApi - functional programming interface
 * @export
 */
export declare const DeviceApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Execute device activation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseActivationPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdditionalInfo>>;
    /**
     *
     * @summary Check if device is activated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseActivationStatusGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceLicenseActivationStatusGet200Response>>;
    /**
     *
     * @summary Get information about license
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeviceLicenseInfoGet200Response>>;
    /**
     *
     * @param {DOSManifest} dOSManifest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceOnboardingPost(dOSManifest: DOSManifest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
};
/**
 * DeviceApi - factory interface
 * @export
 */
export declare const DeviceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Execute device activation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseActivationPost(options?: RawAxiosRequestConfig): AxiosPromise<AdditionalInfo>;
    /**
     *
     * @summary Check if device is activated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseActivationStatusGet(options?: RawAxiosRequestConfig): AxiosPromise<DeviceLicenseActivationStatusGet200Response>;
    /**
     *
     * @summary Get information about license
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceLicenseInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<DeviceLicenseInfoGet200Response>;
    /**
     *
     * @param {DeviceApiDeviceOnboardingPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deviceOnboardingPost(requestParameters: DeviceApiDeviceOnboardingPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
};
/**
 * Request parameters for deviceOnboardingPost operation in DeviceApi.
 * @export
 * @interface DeviceApiDeviceOnboardingPostRequest
 */
export interface DeviceApiDeviceOnboardingPostRequest {
    /**
     *
     * @type {DOSManifest}
     * @memberof DeviceApiDeviceOnboardingPost
     */
    readonly dOSManifest: DOSManifest;
}
/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
export declare class DeviceApi extends BaseAPI {
    /**
     *
     * @summary Execute device activation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceLicenseActivationPost(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdditionalInfo, any>>;
    /**
     *
     * @summary Check if device is activated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceLicenseActivationStatusGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceLicenseActivationStatusGet200Response, any>>;
    /**
     *
     * @summary Get information about license
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceLicenseInfoGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<DeviceLicenseInfoGet200Response, any>>;
    /**
     *
     * @param {DeviceApiDeviceOnboardingPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    deviceOnboardingPost(requestParameters: DeviceApiDeviceOnboardingPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
}
/**
 * FlecsportApi - axios parameter creator
 * @export
 */
export declare const FlecsportApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete specified export
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsExportIdDelete: (exportId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Download specified export
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsExportIdGet: (exportId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Query all existing exports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create an export
     * @param {ExportRequest} exportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsPost: (exportRequest: ExportRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload and import an export file
     * @param {string} contentDisposition File name of the export, e.g. my-export.tar
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importsPost: (contentDisposition: string, file?: File, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * FlecsportApi - functional programming interface
 * @export
 */
export declare const FlecsportApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Delete specified export
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsExportIdDelete(exportId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Download specified export
     * @param {string} exportId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsExportIdGet(exportId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>>;
    /**
     *
     * @summary Query all existing exports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @summary Create an export
     * @param {ExportRequest} exportRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsPost(exportRequest: ExportRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
    /**
     *
     * @summary Upload and import an export file
     * @param {string} contentDisposition File name of the export, e.g. my-export.tar
     * @param {File} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importsPost(contentDisposition: string, file?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
};
/**
 * FlecsportApi - factory interface
 * @export
 */
export declare const FlecsportApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Delete specified export
     * @param {FlecsportApiExportsExportIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsExportIdDelete(requestParameters: FlecsportApiExportsExportIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Download specified export
     * @param {FlecsportApiExportsExportIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsExportIdGet(requestParameters: FlecsportApiExportsExportIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<File>;
    /**
     *
     * @summary Query all existing exports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<string>>;
    /**
     *
     * @summary Create an export
     * @param {FlecsportApiExportsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportsPost(requestParameters: FlecsportApiExportsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
    /**
     *
     * @summary Upload and import an export file
     * @param {FlecsportApiImportsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    importsPost(requestParameters: FlecsportApiImportsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
};
/**
 * Request parameters for exportsExportIdDelete operation in FlecsportApi.
 * @export
 * @interface FlecsportApiExportsExportIdDeleteRequest
 */
export interface FlecsportApiExportsExportIdDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof FlecsportApiExportsExportIdDelete
     */
    readonly exportId: string;
}
/**
 * Request parameters for exportsExportIdGet operation in FlecsportApi.
 * @export
 * @interface FlecsportApiExportsExportIdGetRequest
 */
export interface FlecsportApiExportsExportIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof FlecsportApiExportsExportIdGet
     */
    readonly exportId: string;
}
/**
 * Request parameters for exportsPost operation in FlecsportApi.
 * @export
 * @interface FlecsportApiExportsPostRequest
 */
export interface FlecsportApiExportsPostRequest {
    /**
     *
     * @type {ExportRequest}
     * @memberof FlecsportApiExportsPost
     */
    readonly exportRequest: ExportRequest;
}
/**
 * Request parameters for importsPost operation in FlecsportApi.
 * @export
 * @interface FlecsportApiImportsPostRequest
 */
export interface FlecsportApiImportsPostRequest {
    /**
     * File name of the export, e.g. my-export.tar
     * @type {string}
     * @memberof FlecsportApiImportsPost
     */
    readonly contentDisposition: string;
    /**
     *
     * @type {File}
     * @memberof FlecsportApiImportsPost
     */
    readonly file?: File;
}
/**
 * FlecsportApi - object-oriented interface
 * @export
 * @class FlecsportApi
 * @extends {BaseAPI}
 */
export declare class FlecsportApi extends BaseAPI {
    /**
     *
     * @summary Delete specified export
     * @param {FlecsportApiExportsExportIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    exportsExportIdDelete(requestParameters: FlecsportApiExportsExportIdDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Download specified export
     * @param {FlecsportApiExportsExportIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    exportsExportIdGet(requestParameters: FlecsportApiExportsExportIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<File, any>>;
    /**
     *
     * @summary Query all existing exports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    exportsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     *
     * @summary Create an export
     * @param {FlecsportApiExportsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    exportsPost(requestParameters: FlecsportApiExportsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
    /**
     *
     * @summary Upload and import an export file
     * @param {FlecsportApiImportsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    importsPost(requestParameters: FlecsportApiImportsPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
}
/**
 * InstancesApi - axios parameter creator
 * @export
 */
export declare const InstancesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create new instance of an installed App
     * @param {InstancesCreatePostRequest} instancesCreatePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesCreatePost: (instancesCreatePostRequest: InstancesCreatePostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Query all instances of one or all Apps
     * @param {string} [app]
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesGet: (app?: string, version?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove all passed through usb devices of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbDelete: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve passed through usb devices of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete passed through usb device of the instance with the given port
     * @param {string} instanceId
     * @param {string} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortDelete: (instanceId: string, port: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve passed through usb device of the instance with the given port
     * @param {string} instanceId
     * @param {string} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortGet: (instanceId: string, port: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Pass through usb device with the given port to the instance
     * @param {string} instanceId
     * @param {string} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortPut: (instanceId: string, port: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve editors of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an editor of an instance
     * @param {string} instanceId
     * @param {number} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortGet: (instanceId: string, port: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
     * @param {string} instanceId
     * @param {number} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortPathPrefixDelete: (instanceId: string, port: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify the path prefix used in the editor uri of an instance editor
     * @param {string} instanceId
     * @param {number} port
     * @param {InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest} instancesInstanceIdConfigEditorsPortPathPrefixPutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortPathPrefixPut: (instanceId: string, port: number, instancesInstanceIdConfigEditorsPortPathPrefixPutRequest: InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete environment of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentDelete: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve environment of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify or create environment of an instance
     * @param {string} instanceId
     * @param {Array<InstanceEnvironmentVariable>} instanceEnvironmentVariable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentPut: (instanceId: string, instanceEnvironmentVariable: Array<InstanceEnvironmentVariable>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove an environment variable of an instance
     * @param {string} instanceId
     * @param {string} variableName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNameDelete: (instanceId: string, variableName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve the value of an environment variable
     * @param {string} instanceId
     * @param {string} variableName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNameGet: (instanceId: string, variableName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set the value of an environment variable of an instance
     * @param {string} instanceId
     * @param {string} variableName
     * @param {InstancesInstanceIdConfigEnvironmentVariableNameGet200Response} instancesInstanceIdConfigEnvironmentVariableNameGet200Response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNamePut: (instanceId: string, variableName: string, instancesInstanceIdConfigEnvironmentVariableNameGet200Response: InstancesInstanceIdConfigEnvironmentVariableNameGet200Response, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve labels of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigLabelsGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve value of a specific label of an instance
     * @param {string} instanceId
     * @param {string} labelName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigLabelsLabelNameGet: (instanceId: string, labelName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve bind mount of an instance
     * @param {string} instanceId
     * @param {string} containerPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsBindContainerPathGet: (instanceId: string, containerPath: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve bind mounts of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsBindGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve volumes of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve volumes mounts of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsVolumesGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve volume mount of an instance
     * @param {string} instanceId
     * @param {string} volumeName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsVolumesVolumeNameGet: (instanceId: string, volumeName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve connected networks of instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove connected network of instance
     * @param {string} instanceId
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksNetworkIdDelete: (instanceId: string, networkId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve connected network of instance
     * @param {string} instanceId
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksNetworkIdGet: (instanceId: string, networkId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Connect instance to network
     * @param {string} instanceId
     * @param {InstancesInstanceIdConfigNetworksPostRequest} instancesInstanceIdConfigNetworksPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksPost: (instanceId: string, instancesInstanceIdConfigNetworksPostRequest: InstancesInstanceIdConfigNetworksPostRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete exposed ports of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsDelete: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve exposed ports of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove all published ports of an instance for the given transport_protocol
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolDelete: (instanceId: string, transportProtocol: TransportProtocol, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get published ports of an instance for the given transport_protocol
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolGet: (instanceId: string, transportProtocol: TransportProtocol, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove instance port range that is mapped to the given host port range
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {string} hostPortRange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete: (instanceId: string, transportProtocol: TransportProtocol, hostPortRange: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve instance port range that is mapped to the given host port range
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {string} hostPortRange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet: (instanceId: string, transportProtocol: TransportProtocol, hostPortRange: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set instance port range that is mapped to the given host port range
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {string} hostPortRange
     * @param {InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest} instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut: (instanceId: string, transportProtocol: TransportProtocol, hostPortRange: string, instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest: InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update or create published ports of an instance for the given transport protocol
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {Array<InstancePortMapping>} instancePortMapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolPut: (instanceId: string, transportProtocol: TransportProtocol, instancePortMapping: Array<InstancePortMapping>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a single instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdDelete: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Access an editor of an app
     * @param {string} instanceId
     * @param {number} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdEditorPortGet: (instanceId: string, port: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Obtain details of an App instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve logs of an Instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdLogsGet: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update or downgrade Instance to another App version
     * @param {string} instanceId
     * @param {InstancesInstanceIdPatchRequest} instancesInstanceIdPatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdPatch: (instanceId: string, instancesInstanceIdPatchRequest: InstancesInstanceIdPatchRequest, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Start an App instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdStartPost: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Stop an App instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdStopPost: (instanceId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InstancesApi - functional programming interface
 * @export
 */
export declare const InstancesApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create new instance of an installed App
     * @param {InstancesCreatePostRequest} instancesCreatePostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesCreatePost(instancesCreatePostRequest: InstancesCreatePostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
    /**
     *
     * @summary Query all instances of one or all Apps
     * @param {string} [app]
     * @param {string} [version]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesGet(app?: string, version?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppInstance>>>;
    /**
     *
     * @summary Remove all passed through usb devices of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbDelete(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve passed through usb devices of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstanceConfigUsbDevice>>>;
    /**
     *
     * @summary Delete passed through usb device of the instance with the given port
     * @param {string} instanceId
     * @param {string} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortDelete(instanceId: string, port: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve passed through usb device of the instance with the given port
     * @param {string} instanceId
     * @param {string} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortGet(instanceId: string, port: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceConfigUsbDevice>>;
    /**
     *
     * @summary Pass through usb device with the given port to the instance
     * @param {string} instanceId
     * @param {string} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortPut(instanceId: string, port: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve editors of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstanceEditor>>>;
    /**
     *
     * @summary Retrieve an editor of an instance
     * @param {string} instanceId
     * @param {number} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortGet(instanceId: string, port: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceEditor>>;
    /**
     *
     * @summary Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
     * @param {string} instanceId
     * @param {number} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortPathPrefixDelete(instanceId: string, port: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Modify the path prefix used in the editor uri of an instance editor
     * @param {string} instanceId
     * @param {number} port
     * @param {InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest} instancesInstanceIdConfigEditorsPortPathPrefixPutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortPathPrefixPut(instanceId: string, port: number, instancesInstanceIdConfigEditorsPortPathPrefixPutRequest: InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete environment of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentDelete(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve environment of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstanceEnvironmentVariable>>>;
    /**
     *
     * @summary Modify or create environment of an instance
     * @param {string} instanceId
     * @param {Array<InstanceEnvironmentVariable>} instanceEnvironmentVariable
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentPut(instanceId: string, instanceEnvironmentVariable: Array<InstanceEnvironmentVariable>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove an environment variable of an instance
     * @param {string} instanceId
     * @param {string} variableName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNameDelete(instanceId: string, variableName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve the value of an environment variable
     * @param {string} instanceId
     * @param {string} variableName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNameGet(instanceId: string, variableName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstancesInstanceIdConfigEnvironmentVariableNameGet200Response>>;
    /**
     *
     * @summary Set the value of an environment variable of an instance
     * @param {string} instanceId
     * @param {string} variableName
     * @param {InstancesInstanceIdConfigEnvironmentVariableNameGet200Response} instancesInstanceIdConfigEnvironmentVariableNameGet200Response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNamePut(instanceId: string, variableName: string, instancesInstanceIdConfigEnvironmentVariableNameGet200Response: InstancesInstanceIdConfigEnvironmentVariableNameGet200Response, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve labels of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigLabelsGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstanceLabel>>>;
    /**
     *
     * @summary Retrieve value of a specific label of an instance
     * @param {string} instanceId
     * @param {string} labelName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigLabelsLabelNameGet(instanceId: string, labelName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstancesInstanceIdConfigLabelsLabelNameGet200Response>>;
    /**
     *
     * @summary Retrieve bind mount of an instance
     * @param {string} instanceId
     * @param {string} containerPath
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsBindContainerPathGet(instanceId: string, containerPath: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BindMount>>;
    /**
     *
     * @summary Retrieve bind mounts of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsBindGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BindMount>>>;
    /**
     *
     * @summary Retrieve volumes of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Mounts>>;
    /**
     *
     * @summary Retrieve volumes mounts of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsVolumesGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstanceDetailVolume>>>;
    /**
     *
     * @summary Retrieve volume mount of an instance
     * @param {string} instanceId
     * @param {string} volumeName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsVolumesVolumeNameGet(instanceId: string, volumeName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceDetailVolume>>;
    /**
     *
     * @summary Retrieve connected networks of instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstanceConfigNetwork>>>;
    /**
     *
     * @summary Remove connected network of instance
     * @param {string} instanceId
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksNetworkIdDelete(instanceId: string, networkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve connected network of instance
     * @param {string} instanceId
     * @param {string} networkId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksNetworkIdGet(instanceId: string, networkId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstanceConfigNetwork>>;
    /**
     *
     * @summary Connect instance to network
     * @param {string} instanceId
     * @param {InstancesInstanceIdConfigNetworksPostRequest} instancesInstanceIdConfigNetworksPostRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksPost(instanceId: string, instancesInstanceIdConfigNetworksPostRequest: InstancesInstanceIdConfigNetworksPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete exposed ports of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsDelete(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve exposed ports of an instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstancePorts>>;
    /**
     *
     * @summary Remove all published ports of an instance for the given transport_protocol
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolDelete(instanceId: string, transportProtocol: TransportProtocol, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get published ports of an instance for the given transport_protocol
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolGet(instanceId: string, transportProtocol: TransportProtocol, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InstancePortMapping>>>;
    /**
     *
     * @summary Remove instance port range that is mapped to the given host port range
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {string} hostPortRange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete(instanceId: string, transportProtocol: TransportProtocol, hostPortRange: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve instance port range that is mapped to the given host port range
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {string} hostPortRange
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet(instanceId: string, transportProtocol: TransportProtocol, hostPortRange: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstancePortMapping>>;
    /**
     *
     * @summary Set instance port range that is mapped to the given host port range
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {string} hostPortRange
     * @param {InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest} instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut(instanceId: string, transportProtocol: TransportProtocol, hostPortRange: string, instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest: InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update or create published ports of an instance for the given transport protocol
     * @param {string} instanceId
     * @param {TransportProtocol} transportProtocol
     * @param {Array<InstancePortMapping>} instancePortMapping
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolPut(instanceId: string, transportProtocol: TransportProtocol, instancePortMapping: Array<InstancePortMapping>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a single instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdDelete(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
    /**
     *
     * @summary Access an editor of an app
     * @param {string} instanceId
     * @param {number} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdEditorPortGet(instanceId: string, port: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Obtain details of an App instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstancesInstanceIdGet200Response>>;
    /**
     *
     * @summary Retrieve logs of an Instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdLogsGet(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InstancesInstanceIdLogsGet200Response>>;
    /**
     *
     * @summary Update or downgrade Instance to another App version
     * @param {string} instanceId
     * @param {InstancesInstanceIdPatchRequest} instancesInstanceIdPatchRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdPatch(instanceId: string, instancesInstanceIdPatchRequest: InstancesInstanceIdPatchRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
    /**
     *
     * @summary Start an App instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdStartPost(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
    /**
     *
     * @summary Stop an App instance
     * @param {string} instanceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdStopPost(instanceId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobMeta>>;
};
/**
 * InstancesApi - factory interface
 * @export
 */
export declare const InstancesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create new instance of an installed App
     * @param {InstancesApiInstancesCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesCreatePost(requestParameters: InstancesApiInstancesCreatePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
    /**
     *
     * @summary Query all instances of one or all Apps
     * @param {InstancesApiInstancesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesGet(requestParameters?: InstancesApiInstancesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<AppInstance>>;
    /**
     *
     * @summary Remove all passed through usb devices of an instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbDelete(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve passed through usb devices of an instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbGet(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<InstanceConfigUsbDevice>>;
    /**
     *
     * @summary Delete passed through usb device of the instance with the given port
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortDelete(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbPortDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve passed through usb device of the instance with the given port
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortGet(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbPortGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstanceConfigUsbDevice>;
    /**
     *
     * @summary Pass through usb device with the given port to the instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigDevicesUsbPortPut(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbPortPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve editors of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEditorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsGet(requestParameters: InstancesApiInstancesInstanceIdConfigEditorsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<InstanceEditor>>;
    /**
     *
     * @summary Retrieve an editor of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortGet(requestParameters: InstancesApiInstancesInstanceIdConfigEditorsPortGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstanceEditor>;
    /**
     *
     * @summary Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortPathPrefixDelete(requestParameters: InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Modify the path prefix used in the editor uri of an instance editor
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEditorsPortPathPrefixPut(requestParameters: InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentDelete(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentGet(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<InstanceEnvironmentVariable>>;
    /**
     *
     * @summary Modify or create environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentPut(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Remove an environment variable of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNameDelete(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve the value of an environment variable
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNameGet(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstancesInstanceIdConfigEnvironmentVariableNameGet200Response>;
    /**
     *
     * @summary Set the value of an environment variable of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigEnvironmentVariableNamePut(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve labels of an instance
     * @param {InstancesApiInstancesInstanceIdConfigLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigLabelsGet(requestParameters: InstancesApiInstancesInstanceIdConfigLabelsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<InstanceLabel>>;
    /**
     *
     * @summary Retrieve value of a specific label of an instance
     * @param {InstancesApiInstancesInstanceIdConfigLabelsLabelNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigLabelsLabelNameGet(requestParameters: InstancesApiInstancesInstanceIdConfigLabelsLabelNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstancesInstanceIdConfigLabelsLabelNameGet200Response>;
    /**
     *
     * @summary Retrieve bind mount of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsBindContainerPathGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<BindMount>;
    /**
     *
     * @summary Retrieve bind mounts of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsBindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsBindGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsBindGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<BindMount>>;
    /**
     *
     * @summary Retrieve volumes of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Mounts>;
    /**
     *
     * @summary Retrieve volumes mounts of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsVolumesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsVolumesGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsVolumesGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<InstanceDetailVolume>>;
    /**
     *
     * @summary Retrieve volume mount of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigMountsVolumesVolumeNameGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstanceDetailVolume>;
    /**
     *
     * @summary Retrieve connected networks of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksGet(requestParameters: InstancesApiInstancesInstanceIdConfigNetworksGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<InstanceConfigNetwork>>;
    /**
     *
     * @summary Remove connected network of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksNetworkIdDelete(requestParameters: InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve connected network of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksNetworkIdGet(requestParameters: InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstanceConfigNetwork>;
    /**
     *
     * @summary Connect instance to network
     * @param {InstancesApiInstancesInstanceIdConfigNetworksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigNetworksPost(requestParameters: InstancesApiInstancesInstanceIdConfigNetworksPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete exposed ports of an instance
     * @param {InstancesApiInstancesInstanceIdConfigPortsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsDelete(requestParameters: InstancesApiInstancesInstanceIdConfigPortsDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve exposed ports of an instance
     * @param {InstancesApiInstancesInstanceIdConfigPortsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsGet(requestParameters: InstancesApiInstancesInstanceIdConfigPortsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstancePorts>;
    /**
     *
     * @summary Remove all published ports of an instance for the given transport_protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolDelete(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get published ports of an instance for the given transport_protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolGet(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<InstancePortMapping>>;
    /**
     *
     * @summary Remove instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstancePortMapping>;
    /**
     *
     * @summary Set instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update or create published ports of an instance for the given transport protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdConfigPortsTransportProtocolPut(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Delete a single instance
     * @param {InstancesApiInstancesInstanceIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdDelete(requestParameters: InstancesApiInstancesInstanceIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
    /**
     *
     * @summary Access an editor of an app
     * @param {InstancesApiInstancesInstanceIdEditorPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdEditorPortGet(requestParameters: InstancesApiInstancesInstanceIdEditorPortGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Obtain details of an App instance
     * @param {InstancesApiInstancesInstanceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdGet(requestParameters: InstancesApiInstancesInstanceIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstancesInstanceIdGet200Response>;
    /**
     *
     * @summary Retrieve logs of an Instance
     * @param {InstancesApiInstancesInstanceIdLogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdLogsGet(requestParameters: InstancesApiInstancesInstanceIdLogsGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<InstancesInstanceIdLogsGet200Response>;
    /**
     *
     * @summary Update or downgrade Instance to another App version
     * @param {InstancesApiInstancesInstanceIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdPatch(requestParameters: InstancesApiInstancesInstanceIdPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
    /**
     *
     * @summary Start an App instance
     * @param {InstancesApiInstancesInstanceIdStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdStartPost(requestParameters: InstancesApiInstancesInstanceIdStartPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
    /**
     *
     * @summary Stop an App instance
     * @param {InstancesApiInstancesInstanceIdStopPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    instancesInstanceIdStopPost(requestParameters: InstancesApiInstancesInstanceIdStopPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<JobMeta>;
};
/**
 * Request parameters for instancesCreatePost operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesCreatePostRequest
 */
export interface InstancesApiInstancesCreatePostRequest {
    /**
     *
     * @type {InstancesCreatePostRequest}
     * @memberof InstancesApiInstancesCreatePost
     */
    readonly instancesCreatePostRequest: InstancesCreatePostRequest;
}
/**
 * Request parameters for instancesGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesGetRequest
 */
export interface InstancesApiInstancesGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesGet
     */
    readonly app?: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesGet
     */
    readonly version?: string;
}
/**
 * Request parameters for instancesInstanceIdConfigDevicesUsbDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigDevicesUsbDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigDevicesUsbDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigDevicesUsbDelete
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigDevicesUsbGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigDevicesUsbGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigDevicesUsbGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigDevicesUsbGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigDevicesUsbPortDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigDevicesUsbPortDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigDevicesUsbPortDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigDevicesUsbPortDelete
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigDevicesUsbPortDelete
     */
    readonly port: string;
}
/**
 * Request parameters for instancesInstanceIdConfigDevicesUsbPortGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigDevicesUsbPortGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigDevicesUsbPortGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigDevicesUsbPortGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigDevicesUsbPortGet
     */
    readonly port: string;
}
/**
 * Request parameters for instancesInstanceIdConfigDevicesUsbPortPut operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigDevicesUsbPortPutRequest
 */
export interface InstancesApiInstancesInstanceIdConfigDevicesUsbPortPutRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigDevicesUsbPortPut
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigDevicesUsbPortPut
     */
    readonly port: string;
}
/**
 * Request parameters for instancesInstanceIdConfigEditorsGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEditorsGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEditorsGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEditorsGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigEditorsPortGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEditorsPortGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEditorsPortGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEditorsPortGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {number}
     * @memberof InstancesApiInstancesInstanceIdConfigEditorsPortGet
     */
    readonly port: number;
}
/**
 * Request parameters for instancesInstanceIdConfigEditorsPortPathPrefixDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDelete
     */
    readonly instanceId: string;
    /**
     *
     * @type {number}
     * @memberof InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDelete
     */
    readonly port: number;
}
/**
 * Request parameters for instancesInstanceIdConfigEditorsPortPathPrefixPut operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPutRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPutRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPut
     */
    readonly instanceId: string;
    /**
     *
     * @type {number}
     * @memberof InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPut
     */
    readonly port: number;
    /**
     *
     * @type {InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest}
     * @memberof InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPut
     */
    readonly instancesInstanceIdConfigEditorsPortPathPrefixPutRequest: InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest;
}
/**
 * Request parameters for instancesInstanceIdConfigEnvironmentDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEnvironmentDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEnvironmentDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentDelete
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigEnvironmentGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEnvironmentGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEnvironmentGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigEnvironmentPut operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEnvironmentPutRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEnvironmentPutRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentPut
     */
    readonly instanceId: string;
    /**
     *
     * @type {Array<InstanceEnvironmentVariable>}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentPut
     */
    readonly instanceEnvironmentVariable: Array<InstanceEnvironmentVariable>;
}
/**
 * Request parameters for instancesInstanceIdConfigEnvironmentVariableNameDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDelete
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDelete
     */
    readonly variableName: string;
}
/**
 * Request parameters for instancesInstanceIdConfigEnvironmentVariableNameGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGet
     */
    readonly variableName: string;
}
/**
 * Request parameters for instancesInstanceIdConfigEnvironmentVariableNamePut operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePutRequest
 */
export interface InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePutRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePut
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePut
     */
    readonly variableName: string;
    /**
     *
     * @type {InstancesInstanceIdConfigEnvironmentVariableNameGet200Response}
     * @memberof InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePut
     */
    readonly instancesInstanceIdConfigEnvironmentVariableNameGet200Response: InstancesInstanceIdConfigEnvironmentVariableNameGet200Response;
}
/**
 * Request parameters for instancesInstanceIdConfigLabelsGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigLabelsGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigLabelsGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigLabelsGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigLabelsLabelNameGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigLabelsLabelNameGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigLabelsLabelNameGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigLabelsLabelNameGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigLabelsLabelNameGet
     */
    readonly labelName: string;
}
/**
 * Request parameters for instancesInstanceIdConfigMountsBindContainerPathGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGet
     */
    readonly containerPath: string;
}
/**
 * Request parameters for instancesInstanceIdConfigMountsBindGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigMountsBindGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigMountsBindGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigMountsBindGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigMountsGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigMountsGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigMountsGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigMountsGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigMountsVolumesGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigMountsVolumesGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigMountsVolumesGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigMountsVolumesGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigMountsVolumesVolumeNameGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGet
     */
    readonly volumeName: string;
}
/**
 * Request parameters for instancesInstanceIdConfigNetworksGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigNetworksGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigNetworksGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigNetworksGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigNetworksNetworkIdDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDelete
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDelete
     */
    readonly networkId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigNetworksNetworkIdGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGet
     */
    readonly networkId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigNetworksPost operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigNetworksPostRequest
 */
export interface InstancesApiInstancesInstanceIdConfigNetworksPostRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigNetworksPost
     */
    readonly instanceId: string;
    /**
     *
     * @type {InstancesInstanceIdConfigNetworksPostRequest}
     * @memberof InstancesApiInstancesInstanceIdConfigNetworksPost
     */
    readonly instancesInstanceIdConfigNetworksPostRequest: InstancesInstanceIdConfigNetworksPostRequest;
}
/**
 * Request parameters for instancesInstanceIdConfigPortsDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigPortsDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigPortsDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsDelete
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigPortsGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigPortsGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigPortsGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdConfigPortsTransportProtocolDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDelete
     */
    readonly instanceId: string;
    /**
     *
     * @type {TransportProtocol}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDelete
     */
    readonly transportProtocol: TransportProtocol;
}
/**
 * Request parameters for instancesInstanceIdConfigPortsTransportProtocolGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {TransportProtocol}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGet
     */
    readonly transportProtocol: TransportProtocol;
}
/**
 * Request parameters for instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete
     */
    readonly instanceId: string;
    /**
     *
     * @type {TransportProtocol}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete
     */
    readonly transportProtocol: TransportProtocol;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete
     */
    readonly hostPortRange: string;
}
/**
 * Request parameters for instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGetRequest
 */
export interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {TransportProtocol}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet
     */
    readonly transportProtocol: TransportProtocol;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet
     */
    readonly hostPortRange: string;
}
/**
 * Request parameters for instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest
 */
export interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePut
     */
    readonly instanceId: string;
    /**
     *
     * @type {TransportProtocol}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePut
     */
    readonly transportProtocol: TransportProtocol;
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePut
     */
    readonly hostPortRange: string;
    /**
     *
     * @type {InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePut
     */
    readonly instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest: InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest;
}
/**
 * Request parameters for instancesInstanceIdConfigPortsTransportProtocolPut operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPutRequest
 */
export interface InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPutRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPut
     */
    readonly instanceId: string;
    /**
     *
     * @type {TransportProtocol}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPut
     */
    readonly transportProtocol: TransportProtocol;
    /**
     *
     * @type {Array<InstancePortMapping>}
     * @memberof InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPut
     */
    readonly instancePortMapping: Array<InstancePortMapping>;
}
/**
 * Request parameters for instancesInstanceIdDelete operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdDeleteRequest
 */
export interface InstancesApiInstancesInstanceIdDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdDelete
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdEditorPortGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdEditorPortGetRequest
 */
export interface InstancesApiInstancesInstanceIdEditorPortGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdEditorPortGet
     */
    readonly instanceId: string;
    /**
     *
     * @type {number}
     * @memberof InstancesApiInstancesInstanceIdEditorPortGet
     */
    readonly port: number;
}
/**
 * Request parameters for instancesInstanceIdGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdGetRequest
 */
export interface InstancesApiInstancesInstanceIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdLogsGet operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdLogsGetRequest
 */
export interface InstancesApiInstancesInstanceIdLogsGetRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdLogsGet
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdPatch operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdPatchRequest
 */
export interface InstancesApiInstancesInstanceIdPatchRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdPatch
     */
    readonly instanceId: string;
    /**
     *
     * @type {InstancesInstanceIdPatchRequest}
     * @memberof InstancesApiInstancesInstanceIdPatch
     */
    readonly instancesInstanceIdPatchRequest: InstancesInstanceIdPatchRequest;
}
/**
 * Request parameters for instancesInstanceIdStartPost operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdStartPostRequest
 */
export interface InstancesApiInstancesInstanceIdStartPostRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdStartPost
     */
    readonly instanceId: string;
}
/**
 * Request parameters for instancesInstanceIdStopPost operation in InstancesApi.
 * @export
 * @interface InstancesApiInstancesInstanceIdStopPostRequest
 */
export interface InstancesApiInstancesInstanceIdStopPostRequest {
    /**
     *
     * @type {string}
     * @memberof InstancesApiInstancesInstanceIdStopPost
     */
    readonly instanceId: string;
}
/**
 * InstancesApi - object-oriented interface
 * @export
 * @class InstancesApi
 * @extends {BaseAPI}
 */
export declare class InstancesApi extends BaseAPI {
    /**
     *
     * @summary Create new instance of an installed App
     * @param {InstancesApiInstancesCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesCreatePost(requestParameters: InstancesApiInstancesCreatePostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
    /**
     *
     * @summary Query all instances of one or all Apps
     * @param {InstancesApiInstancesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesGet(requestParameters?: InstancesApiInstancesGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AppInstance[], any>>;
    /**
     *
     * @summary Remove all passed through usb devices of an instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigDevicesUsbDelete(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve passed through usb devices of an instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigDevicesUsbGet(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceConfigUsbDevice[], any>>;
    /**
     *
     * @summary Delete passed through usb device of the instance with the given port
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigDevicesUsbPortDelete(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbPortDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve passed through usb device of the instance with the given port
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigDevicesUsbPortGet(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbPortGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceConfigUsbDevice, any>>;
    /**
     *
     * @summary Pass through usb device with the given port to the instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigDevicesUsbPortPut(requestParameters: InstancesApiInstancesInstanceIdConfigDevicesUsbPortPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve editors of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEditorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEditorsGet(requestParameters: InstancesApiInstancesInstanceIdConfigEditorsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceEditor[], any>>;
    /**
     *
     * @summary Retrieve an editor of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEditorsPortGet(requestParameters: InstancesApiInstancesInstanceIdConfigEditorsPortGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceEditor, any>>;
    /**
     *
     * @summary Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEditorsPortPathPrefixDelete(requestParameters: InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Modify the path prefix used in the editor uri of an instance editor
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEditorsPortPathPrefixPut(requestParameters: InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEnvironmentDelete(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEnvironmentGet(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceEnvironmentVariable[], any>>;
    /**
     *
     * @summary Modify or create environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEnvironmentPut(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove an environment variable of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEnvironmentVariableNameDelete(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve the value of an environment variable
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEnvironmentVariableNameGet(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstancesInstanceIdConfigEnvironmentVariableNameGet200Response, any>>;
    /**
     *
     * @summary Set the value of an environment variable of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigEnvironmentVariableNamePut(requestParameters: InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve labels of an instance
     * @param {InstancesApiInstancesInstanceIdConfigLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigLabelsGet(requestParameters: InstancesApiInstancesInstanceIdConfigLabelsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceLabel[], any>>;
    /**
     *
     * @summary Retrieve value of a specific label of an instance
     * @param {InstancesApiInstancesInstanceIdConfigLabelsLabelNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigLabelsLabelNameGet(requestParameters: InstancesApiInstancesInstanceIdConfigLabelsLabelNameGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstancesInstanceIdConfigLabelsLabelNameGet200Response, any>>;
    /**
     *
     * @summary Retrieve bind mount of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigMountsBindContainerPathGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BindMount, any>>;
    /**
     *
     * @summary Retrieve bind mounts of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsBindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigMountsBindGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsBindGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<BindMount[], any>>;
    /**
     *
     * @summary Retrieve volumes of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigMountsGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Mounts, any>>;
    /**
     *
     * @summary Retrieve volumes mounts of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsVolumesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigMountsVolumesGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsVolumesGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceDetailVolume[], any>>;
    /**
     *
     * @summary Retrieve volume mount of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigMountsVolumesVolumeNameGet(requestParameters: InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceDetailVolume, any>>;
    /**
     *
     * @summary Retrieve connected networks of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigNetworksGet(requestParameters: InstancesApiInstancesInstanceIdConfigNetworksGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceConfigNetwork[], any>>;
    /**
     *
     * @summary Remove connected network of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigNetworksNetworkIdDelete(requestParameters: InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve connected network of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigNetworksNetworkIdGet(requestParameters: InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstanceConfigNetwork, any>>;
    /**
     *
     * @summary Connect instance to network
     * @param {InstancesApiInstancesInstanceIdConfigNetworksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigNetworksPost(requestParameters: InstancesApiInstancesInstanceIdConfigNetworksPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete exposed ports of an instance
     * @param {InstancesApiInstancesInstanceIdConfigPortsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigPortsDelete(requestParameters: InstancesApiInstancesInstanceIdConfigPortsDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve exposed ports of an instance
     * @param {InstancesApiInstancesInstanceIdConfigPortsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigPortsGet(requestParameters: InstancesApiInstancesInstanceIdConfigPortsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstancePorts, any>>;
    /**
     *
     * @summary Remove all published ports of an instance for the given transport_protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigPortsTransportProtocolDelete(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get published ports of an instance for the given transport_protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigPortsTransportProtocolGet(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstancePortMapping[], any>>;
    /**
     *
     * @summary Remove instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstancePortMapping, any>>;
    /**
     *
     * @summary Set instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update or create published ports of an instance for the given transport protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdConfigPortsTransportProtocolPut(requestParameters: InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a single instance
     * @param {InstancesApiInstancesInstanceIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdDelete(requestParameters: InstancesApiInstancesInstanceIdDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
    /**
     *
     * @summary Access an editor of an app
     * @param {InstancesApiInstancesInstanceIdEditorPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdEditorPortGet(requestParameters: InstancesApiInstancesInstanceIdEditorPortGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Obtain details of an App instance
     * @param {InstancesApiInstancesInstanceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdGet(requestParameters: InstancesApiInstancesInstanceIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstancesInstanceIdGet200Response, any>>;
    /**
     *
     * @summary Retrieve logs of an Instance
     * @param {InstancesApiInstancesInstanceIdLogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdLogsGet(requestParameters: InstancesApiInstancesInstanceIdLogsGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<InstancesInstanceIdLogsGet200Response, any>>;
    /**
     *
     * @summary Update or downgrade Instance to another App version
     * @param {InstancesApiInstancesInstanceIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdPatch(requestParameters: InstancesApiInstancesInstanceIdPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
    /**
     *
     * @summary Start an App instance
     * @param {InstancesApiInstancesInstanceIdStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdStartPost(requestParameters: InstancesApiInstancesInstanceIdStartPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
    /**
     *
     * @summary Stop an App instance
     * @param {InstancesApiInstancesInstanceIdStopPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    instancesInstanceIdStopPost(requestParameters: InstancesApiInstancesInstanceIdStopPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<JobMeta, any>>;
}
/**
 * JobsApi - axios parameter creator
 * @export
 */
export declare const JobsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve a list of all pending/queued/running/failed/cancelled jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Cancel job or remove failed/successful/cancelled job from journal
     * @param {number} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsJobIdDelete: (jobId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve information for specific job_id
     * @param {number} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsJobIdGet: (jobId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * JobsApi - functional programming interface
 * @export
 */
export declare const JobsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve a list of all pending/queued/running/failed/cancelled jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Job>>>;
    /**
     *
     * @summary Cancel job or remove failed/successful/cancelled job from journal
     * @param {number} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsJobIdDelete(jobId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve information for specific job_id
     * @param {number} jobId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsJobIdGet(jobId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>>;
};
/**
 * JobsApi - factory interface
 * @export
 */
export declare const JobsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve a list of all pending/queued/running/failed/cancelled jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<Job>>;
    /**
     *
     * @summary Cancel job or remove failed/successful/cancelled job from journal
     * @param {JobsApiJobsJobIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsJobIdDelete(requestParameters: JobsApiJobsJobIdDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve information for specific job_id
     * @param {JobsApiJobsJobIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    jobsJobIdGet(requestParameters: JobsApiJobsJobIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Job>;
};
/**
 * Request parameters for jobsJobIdDelete operation in JobsApi.
 * @export
 * @interface JobsApiJobsJobIdDeleteRequest
 */
export interface JobsApiJobsJobIdDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof JobsApiJobsJobIdDelete
     */
    readonly jobId: number;
}
/**
 * Request parameters for jobsJobIdGet operation in JobsApi.
 * @export
 * @interface JobsApiJobsJobIdGetRequest
 */
export interface JobsApiJobsJobIdGetRequest {
    /**
     *
     * @type {number}
     * @memberof JobsApiJobsJobIdGet
     */
    readonly jobId: number;
}
/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export declare class JobsApi extends BaseAPI {
    /**
     *
     * @summary Retrieve a list of all pending/queued/running/failed/cancelled jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    jobsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Job[], any>>;
    /**
     *
     * @summary Cancel job or remove failed/successful/cancelled job from journal
     * @param {JobsApiJobsJobIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    jobsJobIdDelete(requestParameters: JobsApiJobsJobIdDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve information for specific job_id
     * @param {JobsApiJobsJobIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    jobsJobIdGet(requestParameters: JobsApiJobsJobIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Job, any>>;
}
/**
 * ManifestsApi - axios parameter creator
 * @export
 */
export declare const ManifestsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a specific manifest
     * @param {string} appName
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manifestsAppNameVersionGet: (appName: string, version: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get a list of all manifests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manifestsGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ManifestsApi - functional programming interface
 * @export
 */
export declare const ManifestsApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get a specific manifest
     * @param {string} appName
     * @param {string} version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manifestsAppNameVersionGet(appName: string, version: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppManifest>>;
    /**
     *
     * @summary Get a list of all manifests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manifestsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AppManifest>>>;
};
/**
 * ManifestsApi - factory interface
 * @export
 */
export declare const ManifestsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get a specific manifest
     * @param {ManifestsApiManifestsAppNameVersionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manifestsAppNameVersionGet(requestParameters: ManifestsApiManifestsAppNameVersionGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<AppManifest>;
    /**
     *
     * @summary Get a list of all manifests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    manifestsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<AppManifest>>;
};
/**
 * Request parameters for manifestsAppNameVersionGet operation in ManifestsApi.
 * @export
 * @interface ManifestsApiManifestsAppNameVersionGetRequest
 */
export interface ManifestsApiManifestsAppNameVersionGetRequest {
    /**
     *
     * @type {string}
     * @memberof ManifestsApiManifestsAppNameVersionGet
     */
    readonly appName: string;
    /**
     *
     * @type {string}
     * @memberof ManifestsApiManifestsAppNameVersionGet
     */
    readonly version: string;
}
/**
 * ManifestsApi - object-oriented interface
 * @export
 * @class ManifestsApi
 * @extends {BaseAPI}
 */
export declare class ManifestsApi extends BaseAPI {
    /**
     *
     * @summary Get a specific manifest
     * @param {ManifestsApiManifestsAppNameVersionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManifestsApi
     */
    manifestsAppNameVersionGet(requestParameters: ManifestsApiManifestsAppNameVersionGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AppManifest, any>>;
    /**
     *
     * @summary Get a list of all manifests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManifestsApi
     */
    manifestsGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AppManifest[], any>>;
}
/**
 * SystemApi - axios parameter creator
 * @export
 */
export declare const SystemApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get usb devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesUsbGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get usb device of system
     * @param {string} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesUsbPortGet: (port: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get architecture and operating system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemInfoGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get network adapters of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemNetworkAdaptersGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get network adapter of system
     * @param {string} networkAdapterId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemNetworkAdaptersNetworkAdapterIdGet: (networkAdapterId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Check daemon availability and connectivity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemPingGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get FLECS core and API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemVersionGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SystemApi - functional programming interface
 * @export
 */
export declare const SystemApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Devices>>;
    /**
     *
     * @summary Get usb devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesUsbGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UsbDevice>>>;
    /**
     *
     * @summary Get usb device of system
     * @param {string} port
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesUsbPortGet(port: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsbDevice>>;
    /**
     *
     * @summary Get architecture and operating system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemInfoGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemInfo>>;
    /**
     *
     * @summary Get network adapters of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemNetworkAdaptersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NetworkAdapter>>>;
    /**
     *
     * @summary Get network adapter of system
     * @param {string} networkAdapterId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemNetworkAdaptersNetworkAdapterIdGet(networkAdapterId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<NetworkAdapter>>;
    /**
     *
     * @summary Check daemon availability and connectivity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemPingGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AdditionalInfo>>;
    /**
     *
     * @summary Get FLECS core and API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemVersionGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemVersionGet200Response>>;
};
/**
 * SystemApi - factory interface
 * @export
 */
export declare const SystemApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesGet(options?: RawAxiosRequestConfig): AxiosPromise<Devices>;
    /**
     *
     * @summary Get usb devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesUsbGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<UsbDevice>>;
    /**
     *
     * @summary Get usb device of system
     * @param {SystemApiSystemDevicesUsbPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemDevicesUsbPortGet(requestParameters: SystemApiSystemDevicesUsbPortGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsbDevice>;
    /**
     *
     * @summary Get architecture and operating system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemInfoGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemInfo>;
    /**
     *
     * @summary Get network adapters of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemNetworkAdaptersGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<NetworkAdapter>>;
    /**
     *
     * @summary Get network adapter of system
     * @param {SystemApiSystemNetworkAdaptersNetworkAdapterIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemNetworkAdaptersNetworkAdapterIdGet(requestParameters: SystemApiSystemNetworkAdaptersNetworkAdapterIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<NetworkAdapter>;
    /**
     *
     * @summary Check daemon availability and connectivity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemPingGet(options?: RawAxiosRequestConfig): AxiosPromise<AdditionalInfo>;
    /**
     *
     * @summary Get FLECS core and API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    systemVersionGet(options?: RawAxiosRequestConfig): AxiosPromise<SystemVersionGet200Response>;
};
/**
 * Request parameters for systemDevicesUsbPortGet operation in SystemApi.
 * @export
 * @interface SystemApiSystemDevicesUsbPortGetRequest
 */
export interface SystemApiSystemDevicesUsbPortGetRequest {
    /**
     *
     * @type {string}
     * @memberof SystemApiSystemDevicesUsbPortGet
     */
    readonly port: string;
}
/**
 * Request parameters for systemNetworkAdaptersNetworkAdapterIdGet operation in SystemApi.
 * @export
 * @interface SystemApiSystemNetworkAdaptersNetworkAdapterIdGetRequest
 */
export interface SystemApiSystemNetworkAdaptersNetworkAdapterIdGetRequest {
    /**
     *
     * @type {string}
     * @memberof SystemApiSystemNetworkAdaptersNetworkAdapterIdGet
     */
    readonly networkAdapterId: string;
}
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export declare class SystemApi extends BaseAPI {
    /**
     *
     * @summary Get devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemDevicesGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Devices, any>>;
    /**
     *
     * @summary Get usb devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemDevicesUsbGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsbDevice[], any>>;
    /**
     *
     * @summary Get usb device of system
     * @param {SystemApiSystemDevicesUsbPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemDevicesUsbPortGet(requestParameters: SystemApiSystemDevicesUsbPortGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsbDevice, any>>;
    /**
     *
     * @summary Get architecture and operating system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemInfoGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SystemInfo, any>>;
    /**
     *
     * @summary Get network adapters of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemNetworkAdaptersGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NetworkAdapter[], any>>;
    /**
     *
     * @summary Get network adapter of system
     * @param {SystemApiSystemNetworkAdaptersNetworkAdapterIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemNetworkAdaptersNetworkAdapterIdGet(requestParameters: SystemApiSystemNetworkAdaptersNetworkAdapterIdGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<NetworkAdapter, any>>;
    /**
     *
     * @summary Check daemon availability and connectivity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemPingGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<AdditionalInfo, any>>;
    /**
     *
     * @summary Get FLECS core and API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    systemVersionGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SystemVersionGet200Response, any>>;
}
