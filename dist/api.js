/* tslint:disable */
/* eslint-disable */
/**
 * FLECS Daemon API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, BaseAPI, operationServerMap } from './base';
export var AppManifestOneOfCapabilitiesEnum = {
    Docker: 'DOCKER',
    NetAdmin: 'NET_ADMIN',
    SysNice: 'SYS_NICE',
    IpcLock: 'IPC_LOCK',
    NetRaw: 'NET_RAW'
};
/**
 *
 * @export
 * @enum {string}
 */
export var AppStatus = {
    NotInstalled: 'not installed',
    ManifestDownloaded: 'manifest downloaded',
    TokenAcquired: 'token acquired',
    ImageDownloaded: 'image downloaded',
    Installed: 'installed',
    Removed: 'removed',
    Purged: 'purged',
    Orphaned: 'orphaned',
    Unknown: 'unknown'
};
/**
 *
 * @export
 * @enum {string}
 */
export var InstanceStatus = {
    NotCreated: 'not created',
    Requested: 'requested',
    ResourcesReady: 'resources ready',
    Created: 'created',
    Stopped: 'stopped',
    Running: 'running',
    Orphaned: 'orphaned',
    Unknown: 'unknown'
};
/**
 *
 * @export
 * @enum {string}
 */
export var JobStatus = {
    Pending: 'pending',
    Queued: 'queued',
    Running: 'running',
    Cancelled: 'cancelled',
    Successful: 'successful',
    Failed: 'failed',
    Unknown: 'unknown'
};
/**
 *
 * @export
 * @enum {string}
 */
export var NetworkKind = {
    Internal: 'internal',
    Bridge: 'bridge',
    Macvlan: 'macvlan',
    Ipvlanl2: 'ipvlanl2',
    Ipvlanl3: 'ipvlanl3'
};
/**
 *
 * @export
 * @enum {string}
 */
export var NetworkType = {
    Unknown: 'unknown',
    Wired: 'wired',
    Wireless: 'wireless',
    Local: 'local',
    Bridge: 'bridge',
    Virtual: 'virtual'
};
/**
 *
 * @export
 * @enum {string}
 */
export var TransportProtocol = {
    Tcp: 'tcp',
    Udp: 'udp',
    Sctp: 'sctp'
};
/**
 * AppsApi - axios parameter creator
 * @export
 */
export var AppsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Uninstall one or all versions an App
         * @param {string} app
         * @param {string} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppDelete: function (app, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'app' is not null or undefined
                    assertParamExists('appsAppDelete', 'app', app);
                    localVarPath = "/apps/{app}"
                        .replace("{".concat("app", "}"), encodeURIComponent(String(app)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (version !== undefined) {
                        localVarQueryParameter['version'] = version;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query all versions or specific versions of an App
         * @param {string} app
         * @param {string} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppGet: function (app, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'app' is not null or undefined
                    assertParamExists('appsAppGet', 'app', app);
                    localVarPath = "/apps/{app}"
                        .replace("{".concat("app", "}"), encodeURIComponent(String(app)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (version !== undefined) {
                        localVarQueryParameter['version'] = version;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query installed Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/apps";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Install an App from the FLECS marketplace
         * @param {AppsInstallPostRequest} appsInstallPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsInstallPost: function (appsInstallPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'appsInstallPostRequest' is not null or undefined
                    assertParamExists('appsInstallPost', 'appsInstallPostRequest', appsInstallPostRequest);
                    localVarPath = "/apps/install";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(appsInstallPostRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Sideload an App from its manifest
         * @param {AppsSideloadPostRequest} appsSideloadPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsSideloadPost: function (appsSideloadPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'appsSideloadPostRequest' is not null or undefined
                    assertParamExists('appsSideloadPost', 'appsSideloadPostRequest', appsSideloadPostRequest);
                    localVarPath = "/apps/sideload";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(appsSideloadPostRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * AppsApi - functional programming interface
 * @export
 */
export var AppsApiFp = function (configuration) {
    var localVarAxiosParamCreator = AppsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Uninstall one or all versions an App
         * @param {string} app
         * @param {string} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppDelete: function (app, version, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appsAppDelete(app, version, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['AppsApi.appsAppDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Query all versions or specific versions of an App
         * @param {string} app
         * @param {string} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppGet: function (app, version, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appsAppGet(app, version, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['AppsApi.appsAppGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Query installed Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['AppsApi.appsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Install an App from the FLECS marketplace
         * @param {AppsInstallPostRequest} appsInstallPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsInstallPost: function (appsInstallPostRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appsInstallPost(appsInstallPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['AppsApi.appsInstallPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Sideload an App from its manifest
         * @param {AppsSideloadPostRequest} appsSideloadPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsSideloadPost: function (appsSideloadPostRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.appsSideloadPost(appsSideloadPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['AppsApi.appsSideloadPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * AppsApi - factory interface
 * @export
 */
export var AppsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = AppsApiFp(configuration);
    return {
        /**
         *
         * @summary Uninstall one or all versions an App
         * @param {AppsApiAppsAppDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppDelete: function (requestParameters, options) {
            return localVarFp.appsAppDelete(requestParameters.app, requestParameters.version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query all versions or specific versions of an App
         * @param {AppsApiAppsAppGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsAppGet: function (requestParameters, options) {
            return localVarFp.appsAppGet(requestParameters.app, requestParameters.version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query installed Apps
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsGet: function (options) {
            return localVarFp.appsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Install an App from the FLECS marketplace
         * @param {AppsApiAppsInstallPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsInstallPost: function (requestParameters, options) {
            return localVarFp.appsInstallPost(requestParameters.appsInstallPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Sideload an App from its manifest
         * @param {AppsApiAppsSideloadPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appsSideloadPost: function (requestParameters, options) {
            return localVarFp.appsSideloadPost(requestParameters.appsSideloadPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * AppsApi - object-oriented interface
 * @export
 * @class AppsApi
 * @extends {BaseAPI}
 */
var AppsApi = /** @class */ (function (_super) {
    __extends(AppsApi, _super);
    function AppsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Uninstall one or all versions an App
     * @param {AppsApiAppsAppDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    AppsApi.prototype.appsAppDelete = function (requestParameters, options) {
        var _this = this;
        return AppsApiFp(this.configuration).appsAppDelete(requestParameters.app, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query all versions or specific versions of an App
     * @param {AppsApiAppsAppGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    AppsApi.prototype.appsAppGet = function (requestParameters, options) {
        var _this = this;
        return AppsApiFp(this.configuration).appsAppGet(requestParameters.app, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query installed Apps
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    AppsApi.prototype.appsGet = function (options) {
        var _this = this;
        return AppsApiFp(this.configuration).appsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Install an App from the FLECS marketplace
     * @param {AppsApiAppsInstallPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    AppsApi.prototype.appsInstallPost = function (requestParameters, options) {
        var _this = this;
        return AppsApiFp(this.configuration).appsInstallPost(requestParameters.appsInstallPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Sideload an App from its manifest
     * @param {AppsApiAppsSideloadPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppsApi
     */
    AppsApi.prototype.appsSideloadPost = function (requestParameters, options) {
        var _this = this;
        return AppsApiFp(this.configuration).appsSideloadPost(requestParameters.appsSideloadPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return AppsApi;
}(BaseAPI));
export { AppsApi };
/**
 * ConsoleApi - axios parameter creator
 * @export
 */
export var ConsoleApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Remove the authentication information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleAuthenticationDelete: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/console/authentication";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Set the authentication information
         * @param {AuthResponseData} authResponseData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleAuthenticationPut: function (authResponseData, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'authResponseData' is not null or undefined
                    assertParamExists('consoleAuthenticationPut', 'authResponseData', authResponseData);
                    localVarPath = "/console/authentication";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(authResponseData, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ConsoleApi - functional programming interface
 * @export
 */
export var ConsoleApiFp = function (configuration) {
    var localVarAxiosParamCreator = ConsoleApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Remove the authentication information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleAuthenticationDelete: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.consoleAuthenticationDelete(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['ConsoleApi.consoleAuthenticationDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Set the authentication information
         * @param {AuthResponseData} authResponseData
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleAuthenticationPut: function (authResponseData, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.consoleAuthenticationPut(authResponseData, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['ConsoleApi.consoleAuthenticationPut']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * ConsoleApi - factory interface
 * @export
 */
export var ConsoleApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ConsoleApiFp(configuration);
    return {
        /**
         *
         * @summary Remove the authentication information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleAuthenticationDelete: function (options) {
            return localVarFp.consoleAuthenticationDelete(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Set the authentication information
         * @param {ConsoleApiConsoleAuthenticationPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        consoleAuthenticationPut: function (requestParameters, options) {
            return localVarFp.consoleAuthenticationPut(requestParameters.authResponseData, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ConsoleApi - object-oriented interface
 * @export
 * @class ConsoleApi
 * @extends {BaseAPI}
 */
var ConsoleApi = /** @class */ (function (_super) {
    __extends(ConsoleApi, _super);
    function ConsoleApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Remove the authentication information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    ConsoleApi.prototype.consoleAuthenticationDelete = function (options) {
        var _this = this;
        return ConsoleApiFp(this.configuration).consoleAuthenticationDelete(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Set the authentication information
     * @param {ConsoleApiConsoleAuthenticationPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConsoleApi
     */
    ConsoleApi.prototype.consoleAuthenticationPut = function (requestParameters, options) {
        var _this = this;
        return ConsoleApiFp(this.configuration).consoleAuthenticationPut(requestParameters.authResponseData, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ConsoleApi;
}(BaseAPI));
export { ConsoleApi };
/**
 * DeploymentsApi - axios parameter creator
 * @export
 */
export var DeploymentsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @param {string} deploymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksGet: function (deploymentId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'deploymentId' is not null or undefined
                    assertParamExists('deploymentsDeploymentIdNetworksGet', 'deploymentId', deploymentId);
                    localVarPath = "/deployments/{deployment_id}/networks"
                        .replace("{".concat("deployment_id", "}"), encodeURIComponent(String(deploymentId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} deploymentId
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post: function (deploymentId, networkId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'deploymentId' is not null or undefined
                    assertParamExists('deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post', 'deploymentId', deploymentId);
                    // verify required parameter 'networkId' is not null or undefined
                    assertParamExists('deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post', 'networkId', networkId);
                    localVarPath = "/deployments/{deployment_id}/networks/{network_id}/dhcp/ipv4"
                        .replace("{".concat("deployment_id", "}"), encodeURIComponent(String(deploymentId)))
                        .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} deploymentId
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksNetworkIdGet: function (deploymentId, networkId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'deploymentId' is not null or undefined
                    assertParamExists('deploymentsDeploymentIdNetworksNetworkIdGet', 'deploymentId', deploymentId);
                    // verify required parameter 'networkId' is not null or undefined
                    assertParamExists('deploymentsDeploymentIdNetworksNetworkIdGet', 'networkId', networkId);
                    localVarPath = "/deployments/{deployment_id}/networks/{network_id}"
                        .replace("{".concat("deployment_id", "}"), encodeURIComponent(String(deploymentId)))
                        .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {string} deploymentId
         * @param {PostDeploymentNetwork} postDeploymentNetwork
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksPost: function (deploymentId, postDeploymentNetwork, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'deploymentId' is not null or undefined
                    assertParamExists('deploymentsDeploymentIdNetworksPost', 'deploymentId', deploymentId);
                    // verify required parameter 'postDeploymentNetwork' is not null or undefined
                    assertParamExists('deploymentsDeploymentIdNetworksPost', 'postDeploymentNetwork', postDeploymentNetwork);
                    localVarPath = "/deployments/{deployment_id}/networks"
                        .replace("{".concat("deployment_id", "}"), encodeURIComponent(String(deploymentId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(postDeploymentNetwork, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * DeploymentsApi - functional programming interface
 * @export
 */
export var DeploymentsApiFp = function (configuration) {
    var localVarAxiosParamCreator = DeploymentsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {string} deploymentId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksGet: function (deploymentId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deploymentsDeploymentIdNetworksGet(deploymentId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeploymentsApi.deploymentsDeploymentIdNetworksGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} deploymentId
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post: function (deploymentId, networkId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post(deploymentId, networkId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeploymentsApi.deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} deploymentId
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksNetworkIdGet: function (deploymentId, networkId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deploymentsDeploymentIdNetworksNetworkIdGet(deploymentId, networkId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeploymentsApi.deploymentsDeploymentIdNetworksNetworkIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {string} deploymentId
         * @param {PostDeploymentNetwork} postDeploymentNetwork
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksPost: function (deploymentId, postDeploymentNetwork, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deploymentsDeploymentIdNetworksPost(deploymentId, postDeploymentNetwork, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeploymentsApi.deploymentsDeploymentIdNetworksPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * DeploymentsApi - factory interface
 * @export
 */
export var DeploymentsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = DeploymentsApiFp(configuration);
    return {
        /**
         *
         * @param {DeploymentsApiDeploymentsDeploymentIdNetworksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksGet: function (requestParameters, options) {
            return localVarFp.deploymentsDeploymentIdNetworksGet(requestParameters.deploymentId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4PostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post: function (requestParameters, options) {
            return localVarFp.deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post(requestParameters.deploymentId, requestParameters.networkId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksNetworkIdGet: function (requestParameters, options) {
            return localVarFp.deploymentsDeploymentIdNetworksNetworkIdGet(requestParameters.deploymentId, requestParameters.networkId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {DeploymentsApiDeploymentsDeploymentIdNetworksPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deploymentsDeploymentIdNetworksPost: function (requestParameters, options) {
            return localVarFp.deploymentsDeploymentIdNetworksPost(requestParameters.deploymentId, requestParameters.postDeploymentNetwork, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * DeploymentsApi - object-oriented interface
 * @export
 * @class DeploymentsApi
 * @extends {BaseAPI}
 */
var DeploymentsApi = /** @class */ (function (_super) {
    __extends(DeploymentsApi, _super);
    function DeploymentsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    DeploymentsApi.prototype.deploymentsDeploymentIdNetworksGet = function (requestParameters, options) {
        var _this = this;
        return DeploymentsApiFp(this.configuration).deploymentsDeploymentIdNetworksGet(requestParameters.deploymentId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdDhcpIpv4PostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    DeploymentsApi.prototype.deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post = function (requestParameters, options) {
        var _this = this;
        return DeploymentsApiFp(this.configuration).deploymentsDeploymentIdNetworksNetworkIdDhcpIpv4Post(requestParameters.deploymentId, requestParameters.networkId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksNetworkIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    DeploymentsApi.prototype.deploymentsDeploymentIdNetworksNetworkIdGet = function (requestParameters, options) {
        var _this = this;
        return DeploymentsApiFp(this.configuration).deploymentsDeploymentIdNetworksNetworkIdGet(requestParameters.deploymentId, requestParameters.networkId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {DeploymentsApiDeploymentsDeploymentIdNetworksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeploymentsApi
     */
    DeploymentsApi.prototype.deploymentsDeploymentIdNetworksPost = function (requestParameters, options) {
        var _this = this;
        return DeploymentsApiFp(this.configuration).deploymentsDeploymentIdNetworksPost(requestParameters.deploymentId, requestParameters.postDeploymentNetwork, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DeploymentsApi;
}(BaseAPI));
export { DeploymentsApi };
/**
 * DeviceApi - axios parameter creator
 * @export
 */
export var DeviceApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Execute device activation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseActivationPost: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/device/license/activation";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Check if device is activated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseActivationStatusGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/device/license/activation/status";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get information about license
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseInfoGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/device/license/info";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @param {DOSManifest} dOSManifest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceOnboardingPost: function (dOSManifest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'dOSManifest' is not null or undefined
                    assertParamExists('deviceOnboardingPost', 'dOSManifest', dOSManifest);
                    localVarPath = "/device/onboarding";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(dOSManifest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * DeviceApi - functional programming interface
 * @export
 */
export var DeviceApiFp = function (configuration) {
    var localVarAxiosParamCreator = DeviceApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Execute device activation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseActivationPost: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceLicenseActivationPost(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeviceApi.deviceLicenseActivationPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Check if device is activated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseActivationStatusGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceLicenseActivationStatusGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeviceApi.deviceLicenseActivationStatusGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get information about license
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseInfoGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceLicenseInfoGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeviceApi.deviceLicenseInfoGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @param {DOSManifest} dOSManifest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceOnboardingPost: function (dOSManifest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.deviceOnboardingPost(dOSManifest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['DeviceApi.deviceOnboardingPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * DeviceApi - factory interface
 * @export
 */
export var DeviceApiFactory = function (configuration, basePath, axios) {
    var localVarFp = DeviceApiFp(configuration);
    return {
        /**
         *
         * @summary Execute device activation
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseActivationPost: function (options) {
            return localVarFp.deviceLicenseActivationPost(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Check if device is activated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseActivationStatusGet: function (options) {
            return localVarFp.deviceLicenseActivationStatusGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get information about license
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceLicenseInfoGet: function (options) {
            return localVarFp.deviceLicenseInfoGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @param {DeviceApiDeviceOnboardingPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deviceOnboardingPost: function (requestParameters, options) {
            return localVarFp.deviceOnboardingPost(requestParameters.dOSManifest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * DeviceApi - object-oriented interface
 * @export
 * @class DeviceApi
 * @extends {BaseAPI}
 */
var DeviceApi = /** @class */ (function (_super) {
    __extends(DeviceApi, _super);
    function DeviceApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Execute device activation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceLicenseActivationPost = function (options) {
        var _this = this;
        return DeviceApiFp(this.configuration).deviceLicenseActivationPost(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Check if device is activated
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceLicenseActivationStatusGet = function (options) {
        var _this = this;
        return DeviceApiFp(this.configuration).deviceLicenseActivationStatusGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get information about license
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceLicenseInfoGet = function (options) {
        var _this = this;
        return DeviceApiFp(this.configuration).deviceLicenseInfoGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @param {DeviceApiDeviceOnboardingPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeviceApi
     */
    DeviceApi.prototype.deviceOnboardingPost = function (requestParameters, options) {
        var _this = this;
        return DeviceApiFp(this.configuration).deviceOnboardingPost(requestParameters.dOSManifest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return DeviceApi;
}(BaseAPI));
export { DeviceApi };
/**
 * FlecsportApi - axios parameter creator
 * @export
 */
export var FlecsportApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Delete specified export
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsExportIdDelete: function (exportId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'exportId' is not null or undefined
                    assertParamExists('exportsExportIdDelete', 'exportId', exportId);
                    localVarPath = "/exports/{export_id}"
                        .replace("{".concat("export_id", "}"), encodeURIComponent(String(exportId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Download specified export
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsExportIdGet: function (exportId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'exportId' is not null or undefined
                    assertParamExists('exportsExportIdGet', 'exportId', exportId);
                    localVarPath = "/exports/{export_id}"
                        .replace("{".concat("export_id", "}"), encodeURIComponent(String(exportId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query all existing exports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/exports";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Create an export
         * @param {ExportRequest} exportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsPost: function (exportRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'exportRequest' is not null or undefined
                    assertParamExists('exportsPost', 'exportRequest', exportRequest);
                    localVarPath = "/exports";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(exportRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Upload and import an export file
         * @param {string} contentDisposition File name of the export, e.g. my-export.tar
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importsPost: function (contentDisposition, file, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, localVarFormParams, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'contentDisposition' is not null or undefined
                    assertParamExists('importsPost', 'contentDisposition', contentDisposition);
                    localVarPath = "/imports";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();
                    if (file !== undefined) {
                        localVarFormParams.append('file', file);
                    }
                    localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
                    if (contentDisposition != null) {
                        localVarHeaderParameter['Content-Disposition'] = String(contentDisposition);
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = localVarFormParams;
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * FlecsportApi - functional programming interface
 * @export
 */
export var FlecsportApiFp = function (configuration) {
    var localVarAxiosParamCreator = FlecsportApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Delete specified export
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsExportIdDelete: function (exportId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportsExportIdDelete(exportId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['FlecsportApi.exportsExportIdDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Download specified export
         * @param {string} exportId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsExportIdGet: function (exportId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportsExportIdGet(exportId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['FlecsportApi.exportsExportIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Query all existing exports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['FlecsportApi.exportsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Create an export
         * @param {ExportRequest} exportRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsPost: function (exportRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.exportsPost(exportRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['FlecsportApi.exportsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Upload and import an export file
         * @param {string} contentDisposition File name of the export, e.g. my-export.tar
         * @param {File} [file]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importsPost: function (contentDisposition, file, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.importsPost(contentDisposition, file, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['FlecsportApi.importsPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * FlecsportApi - factory interface
 * @export
 */
export var FlecsportApiFactory = function (configuration, basePath, axios) {
    var localVarFp = FlecsportApiFp(configuration);
    return {
        /**
         *
         * @summary Delete specified export
         * @param {FlecsportApiExportsExportIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsExportIdDelete: function (requestParameters, options) {
            return localVarFp.exportsExportIdDelete(requestParameters.exportId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Download specified export
         * @param {FlecsportApiExportsExportIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsExportIdGet: function (requestParameters, options) {
            return localVarFp.exportsExportIdGet(requestParameters.exportId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query all existing exports
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsGet: function (options) {
            return localVarFp.exportsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Create an export
         * @param {FlecsportApiExportsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportsPost: function (requestParameters, options) {
            return localVarFp.exportsPost(requestParameters.exportRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Upload and import an export file
         * @param {FlecsportApiImportsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importsPost: function (requestParameters, options) {
            return localVarFp.importsPost(requestParameters.contentDisposition, requestParameters.file, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * FlecsportApi - object-oriented interface
 * @export
 * @class FlecsportApi
 * @extends {BaseAPI}
 */
var FlecsportApi = /** @class */ (function (_super) {
    __extends(FlecsportApi, _super);
    function FlecsportApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Delete specified export
     * @param {FlecsportApiExportsExportIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    FlecsportApi.prototype.exportsExportIdDelete = function (requestParameters, options) {
        var _this = this;
        return FlecsportApiFp(this.configuration).exportsExportIdDelete(requestParameters.exportId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Download specified export
     * @param {FlecsportApiExportsExportIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    FlecsportApi.prototype.exportsExportIdGet = function (requestParameters, options) {
        var _this = this;
        return FlecsportApiFp(this.configuration).exportsExportIdGet(requestParameters.exportId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query all existing exports
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    FlecsportApi.prototype.exportsGet = function (options) {
        var _this = this;
        return FlecsportApiFp(this.configuration).exportsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Create an export
     * @param {FlecsportApiExportsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    FlecsportApi.prototype.exportsPost = function (requestParameters, options) {
        var _this = this;
        return FlecsportApiFp(this.configuration).exportsPost(requestParameters.exportRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Upload and import an export file
     * @param {FlecsportApiImportsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FlecsportApi
     */
    FlecsportApi.prototype.importsPost = function (requestParameters, options) {
        var _this = this;
        return FlecsportApiFp(this.configuration).importsPost(requestParameters.contentDisposition, requestParameters.file, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return FlecsportApi;
}(BaseAPI));
export { FlecsportApi };
/**
 * InstancesApi - axios parameter creator
 * @export
 */
export var InstancesApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Create new instance of an installed App
         * @param {InstancesCreatePostRequest} instancesCreatePostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesCreatePost: function (instancesCreatePostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instancesCreatePostRequest' is not null or undefined
                    assertParamExists('instancesCreatePost', 'instancesCreatePostRequest', instancesCreatePostRequest);
                    localVarPath = "/instances/create";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(instancesCreatePostRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Query all instances of one or all Apps
         * @param {string} [app]
         * @param {string} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGet: function (app, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/instances";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    if (app !== undefined) {
                        localVarQueryParameter['app'] = app;
                    }
                    if (version !== undefined) {
                        localVarQueryParameter['version'] = version;
                    }
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Remove all passed through usb devices of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbDelete: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigDevicesUsbDelete', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/devices/usb"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve passed through usb devices of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigDevicesUsbGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/devices/usb"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Delete passed through usb device of the instance with the given port
         * @param {string} instanceId
         * @param {string} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortDelete: function (instanceId, port, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigDevicesUsbPortDelete', 'instanceId', instanceId);
                    // verify required parameter 'port' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigDevicesUsbPortDelete', 'port', port);
                    localVarPath = "/instances/{instance_id}/config/devices/usb/{port}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("port", "}"), encodeURIComponent(String(port)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve passed through usb device of the instance with the given port
         * @param {string} instanceId
         * @param {string} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortGet: function (instanceId, port, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigDevicesUsbPortGet', 'instanceId', instanceId);
                    // verify required parameter 'port' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigDevicesUsbPortGet', 'port', port);
                    localVarPath = "/instances/{instance_id}/config/devices/usb/{port}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("port", "}"), encodeURIComponent(String(port)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Pass through usb device with the given port to the instance
         * @param {string} instanceId
         * @param {string} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortPut: function (instanceId, port, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigDevicesUsbPortPut', 'instanceId', instanceId);
                    // verify required parameter 'port' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigDevicesUsbPortPut', 'port', port);
                    localVarPath = "/instances/{instance_id}/config/devices/usb/{port}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("port", "}"), encodeURIComponent(String(port)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve editors of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEditorsGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/editors"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve an editor of an instance
         * @param {string} instanceId
         * @param {number} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortGet: function (instanceId, port, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEditorsPortGet', 'instanceId', instanceId);
                    // verify required parameter 'port' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEditorsPortGet', 'port', port);
                    localVarPath = "/instances/{instance_id}/config/editors/{port}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("port", "}"), encodeURIComponent(String(port)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
         * @param {string} instanceId
         * @param {number} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortPathPrefixDelete: function (instanceId, port, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEditorsPortPathPrefixDelete', 'instanceId', instanceId);
                    // verify required parameter 'port' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEditorsPortPathPrefixDelete', 'port', port);
                    localVarPath = "/instances/{instance_id}/config/editors/{port}/path_prefix"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("port", "}"), encodeURIComponent(String(port)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Modify the path prefix used in the editor uri of an instance editor
         * @param {string} instanceId
         * @param {number} port
         * @param {InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest} instancesInstanceIdConfigEditorsPortPathPrefixPutRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortPathPrefixPut: function (instanceId, port, instancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEditorsPortPathPrefixPut', 'instanceId', instanceId);
                    // verify required parameter 'port' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEditorsPortPathPrefixPut', 'port', port);
                    // verify required parameter 'instancesInstanceIdConfigEditorsPortPathPrefixPutRequest' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEditorsPortPathPrefixPut', 'instancesInstanceIdConfigEditorsPortPathPrefixPutRequest', instancesInstanceIdConfigEditorsPortPathPrefixPutRequest);
                    localVarPath = "/instances/{instance_id}/config/editors/{port}/path_prefix"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("port", "}"), encodeURIComponent(String(port)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(instancesInstanceIdConfigEditorsPortPathPrefixPutRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Delete environment of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentDelete: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentDelete', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/environment"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve environment of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/environment"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Modify or create environment of an instance
         * @param {string} instanceId
         * @param {Array<InstanceEnvironmentVariable>} instanceEnvironmentVariable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentPut: function (instanceId, instanceEnvironmentVariable, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentPut', 'instanceId', instanceId);
                    // verify required parameter 'instanceEnvironmentVariable' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentPut', 'instanceEnvironmentVariable', instanceEnvironmentVariable);
                    localVarPath = "/instances/{instance_id}/config/environment"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(instanceEnvironmentVariable, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Remove an environment variable of an instance
         * @param {string} instanceId
         * @param {string} variableName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNameDelete: function (instanceId, variableName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentVariableNameDelete', 'instanceId', instanceId);
                    // verify required parameter 'variableName' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentVariableNameDelete', 'variableName', variableName);
                    localVarPath = "/instances/{instance_id}/config/environment/{variable_name}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("variable_name", "}"), encodeURIComponent(String(variableName)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve the value of an environment variable
         * @param {string} instanceId
         * @param {string} variableName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNameGet: function (instanceId, variableName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentVariableNameGet', 'instanceId', instanceId);
                    // verify required parameter 'variableName' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentVariableNameGet', 'variableName', variableName);
                    localVarPath = "/instances/{instance_id}/config/environment/{variable_name}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("variable_name", "}"), encodeURIComponent(String(variableName)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Set the value of an environment variable of an instance
         * @param {string} instanceId
         * @param {string} variableName
         * @param {InstancesInstanceIdConfigEnvironmentVariableNameGet200Response} instancesInstanceIdConfigEnvironmentVariableNameGet200Response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNamePut: function (instanceId, variableName, instancesInstanceIdConfigEnvironmentVariableNameGet200Response, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentVariableNamePut', 'instanceId', instanceId);
                    // verify required parameter 'variableName' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentVariableNamePut', 'variableName', variableName);
                    // verify required parameter 'instancesInstanceIdConfigEnvironmentVariableNameGet200Response' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigEnvironmentVariableNamePut', 'instancesInstanceIdConfigEnvironmentVariableNameGet200Response', instancesInstanceIdConfigEnvironmentVariableNameGet200Response);
                    localVarPath = "/instances/{instance_id}/config/environment/{variable_name}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("variable_name", "}"), encodeURIComponent(String(variableName)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(instancesInstanceIdConfigEnvironmentVariableNameGet200Response, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve labels of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigLabelsGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigLabelsGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/labels"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve value of a specific label of an instance
         * @param {string} instanceId
         * @param {string} labelName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigLabelsLabelNameGet: function (instanceId, labelName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigLabelsLabelNameGet', 'instanceId', instanceId);
                    // verify required parameter 'labelName' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigLabelsLabelNameGet', 'labelName', labelName);
                    localVarPath = "/instances/{instance_id}/config/labels/{label_name}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("label_name", "}"), encodeURIComponent(String(labelName)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve bind mount of an instance
         * @param {string} instanceId
         * @param {string} containerPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsBindContainerPathGet: function (instanceId, containerPath, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigMountsBindContainerPathGet', 'instanceId', instanceId);
                    // verify required parameter 'containerPath' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigMountsBindContainerPathGet', 'containerPath', containerPath);
                    localVarPath = "/instances/{instance_id}/config/mounts/bind/{container_path}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("container_path", "}"), encodeURIComponent(String(containerPath)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve bind mounts of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsBindGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigMountsBindGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/mounts/bind"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve volumes of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigMountsGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/mounts"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve volumes mounts of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsVolumesGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigMountsVolumesGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/mounts/volumes"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve volume mount of an instance
         * @param {string} instanceId
         * @param {string} volumeName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsVolumesVolumeNameGet: function (instanceId, volumeName, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigMountsVolumesVolumeNameGet', 'instanceId', instanceId);
                    // verify required parameter 'volumeName' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigMountsVolumesVolumeNameGet', 'volumeName', volumeName);
                    localVarPath = "/instances/{instance_id}/config/mounts/volumes/{volume_name}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("volume_name", "}"), encodeURIComponent(String(volumeName)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve connected networks of instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigNetworksGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/networks"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Remove connected network of instance
         * @param {string} instanceId
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksNetworkIdDelete: function (instanceId, networkId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigNetworksNetworkIdDelete', 'instanceId', instanceId);
                    // verify required parameter 'networkId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigNetworksNetworkIdDelete', 'networkId', networkId);
                    localVarPath = "/instances/{instance_id}/config/networks/{network_id}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve connected network of instance
         * @param {string} instanceId
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksNetworkIdGet: function (instanceId, networkId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigNetworksNetworkIdGet', 'instanceId', instanceId);
                    // verify required parameter 'networkId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigNetworksNetworkIdGet', 'networkId', networkId);
                    localVarPath = "/instances/{instance_id}/config/networks/{network_id}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("network_id", "}"), encodeURIComponent(String(networkId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Connect instance to network
         * @param {string} instanceId
         * @param {InstancesInstanceIdConfigNetworksPostRequest} instancesInstanceIdConfigNetworksPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksPost: function (instanceId, instancesInstanceIdConfigNetworksPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigNetworksPost', 'instanceId', instanceId);
                    // verify required parameter 'instancesInstanceIdConfigNetworksPostRequest' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigNetworksPost', 'instancesInstanceIdConfigNetworksPostRequest', instancesInstanceIdConfigNetworksPostRequest);
                    localVarPath = "/instances/{instance_id}/config/networks"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(instancesInstanceIdConfigNetworksPostRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Delete exposed ports of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsDelete: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsDelete', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/ports"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve exposed ports of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/config/ports"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Remove all published ports of an instance for the given transport_protocol
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolDelete: function (instanceId, transportProtocol, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolDelete', 'instanceId', instanceId);
                    // verify required parameter 'transportProtocol' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolDelete', 'transportProtocol', transportProtocol);
                    localVarPath = "/instances/{instance_id}/config/ports/{transport_protocol}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("transport_protocol", "}"), encodeURIComponent(String(transportProtocol)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get published ports of an instance for the given transport_protocol
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolGet: function (instanceId, transportProtocol, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolGet', 'instanceId', instanceId);
                    // verify required parameter 'transportProtocol' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolGet', 'transportProtocol', transportProtocol);
                    localVarPath = "/instances/{instance_id}/config/ports/{transport_protocol}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("transport_protocol", "}"), encodeURIComponent(String(transportProtocol)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Remove instance port range that is mapped to the given host port range
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {string} hostPortRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete: function (instanceId, transportProtocol, hostPortRange, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete', 'instanceId', instanceId);
                    // verify required parameter 'transportProtocol' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete', 'transportProtocol', transportProtocol);
                    // verify required parameter 'hostPortRange' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete', 'hostPortRange', hostPortRange);
                    localVarPath = "/instances/{instance_id}/config/ports/{transport_protocol}/{host_port_range}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("transport_protocol", "}"), encodeURIComponent(String(transportProtocol)))
                        .replace("{".concat("host_port_range", "}"), encodeURIComponent(String(hostPortRange)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve instance port range that is mapped to the given host port range
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {string} hostPortRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet: function (instanceId, transportProtocol, hostPortRange, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet', 'instanceId', instanceId);
                    // verify required parameter 'transportProtocol' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet', 'transportProtocol', transportProtocol);
                    // verify required parameter 'hostPortRange' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet', 'hostPortRange', hostPortRange);
                    localVarPath = "/instances/{instance_id}/config/ports/{transport_protocol}/{host_port_range}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("transport_protocol", "}"), encodeURIComponent(String(transportProtocol)))
                        .replace("{".concat("host_port_range", "}"), encodeURIComponent(String(hostPortRange)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Set instance port range that is mapped to the given host port range
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {string} hostPortRange
         * @param {InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest} instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut: function (instanceId, transportProtocol, hostPortRange, instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut', 'instanceId', instanceId);
                    // verify required parameter 'transportProtocol' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut', 'transportProtocol', transportProtocol);
                    // verify required parameter 'hostPortRange' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut', 'hostPortRange', hostPortRange);
                    // verify required parameter 'instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut', 'instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest', instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest);
                    localVarPath = "/instances/{instance_id}/config/ports/{transport_protocol}/{host_port_range}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("transport_protocol", "}"), encodeURIComponent(String(transportProtocol)))
                        .replace("{".concat("host_port_range", "}"), encodeURIComponent(String(hostPortRange)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Update or create published ports of an instance for the given transport protocol
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {Array<InstancePortMapping>} instancePortMapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolPut: function (instanceId, transportProtocol, instancePortMapping, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolPut', 'instanceId', instanceId);
                    // verify required parameter 'transportProtocol' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolPut', 'transportProtocol', transportProtocol);
                    // verify required parameter 'instancePortMapping' is not null or undefined
                    assertParamExists('instancesInstanceIdConfigPortsTransportProtocolPut', 'instancePortMapping', instancePortMapping);
                    localVarPath = "/instances/{instance_id}/config/ports/{transport_protocol}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("transport_protocol", "}"), encodeURIComponent(String(transportProtocol)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(instancePortMapping, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Delete a single instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdDelete: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdDelete', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Access an editor of an app
         * @param {string} instanceId
         * @param {number} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdEditorPortGet: function (instanceId, port, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdEditorPortGet', 'instanceId', instanceId);
                    // verify required parameter 'port' is not null or undefined
                    assertParamExists('instancesInstanceIdEditorPortGet', 'port', port);
                    localVarPath = "/instances/{instance_id}/editor/{port}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)))
                        .replace("{".concat("port", "}"), encodeURIComponent(String(port)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Obtain details of an App instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve logs of an Instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdLogsGet: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdLogsGet', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/logs"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Update or downgrade Instance to another App version
         * @param {string} instanceId
         * @param {InstancesInstanceIdPatchRequest} instancesInstanceIdPatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdPatch: function (instanceId, instancesInstanceIdPatchRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdPatch', 'instanceId', instanceId);
                    // verify required parameter 'instancesInstanceIdPatchRequest' is not null or undefined
                    assertParamExists('instancesInstanceIdPatch', 'instancesInstanceIdPatchRequest', instancesInstanceIdPatchRequest);
                    localVarPath = "/instances/{instance_id}"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = serializeDataIfNeeded(instancesInstanceIdPatchRequest, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Start an App instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdStartPost: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdStartPost', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/start"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Stop an App instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdStopPost: function (instanceId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'instanceId' is not null or undefined
                    assertParamExists('instancesInstanceIdStopPost', 'instanceId', instanceId);
                    localVarPath = "/instances/{instance_id}/stop"
                        .replace("{".concat("instance_id", "}"), encodeURIComponent(String(instanceId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * InstancesApi - functional programming interface
 * @export
 */
export var InstancesApiFp = function (configuration) {
    var localVarAxiosParamCreator = InstancesApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Create new instance of an installed App
         * @param {InstancesCreatePostRequest} instancesCreatePostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesCreatePost: function (instancesCreatePostRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesCreatePost(instancesCreatePostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesCreatePost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Query all instances of one or all Apps
         * @param {string} [app]
         * @param {string} [version]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGet: function (app, version, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesGet(app, version, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove all passed through usb devices of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbDelete: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigDevicesUsbDelete(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigDevicesUsbDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve passed through usb devices of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigDevicesUsbGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigDevicesUsbGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete passed through usb device of the instance with the given port
         * @param {string} instanceId
         * @param {string} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortDelete: function (instanceId, port, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigDevicesUsbPortDelete(instanceId, port, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigDevicesUsbPortDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve passed through usb device of the instance with the given port
         * @param {string} instanceId
         * @param {string} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortGet: function (instanceId, port, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigDevicesUsbPortGet(instanceId, port, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigDevicesUsbPortGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Pass through usb device with the given port to the instance
         * @param {string} instanceId
         * @param {string} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortPut: function (instanceId, port, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigDevicesUsbPortPut(instanceId, port, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigDevicesUsbPortPut']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve editors of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEditorsGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEditorsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve an editor of an instance
         * @param {string} instanceId
         * @param {number} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortGet: function (instanceId, port, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEditorsPortGet(instanceId, port, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEditorsPortGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
         * @param {string} instanceId
         * @param {number} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortPathPrefixDelete: function (instanceId, port, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEditorsPortPathPrefixDelete(instanceId, port, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEditorsPortPathPrefixDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Modify the path prefix used in the editor uri of an instance editor
         * @param {string} instanceId
         * @param {number} port
         * @param {InstancesInstanceIdConfigEditorsPortPathPrefixPutRequest} instancesInstanceIdConfigEditorsPortPathPrefixPutRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortPathPrefixPut: function (instanceId, port, instancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEditorsPortPathPrefixPut(instanceId, port, instancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEditorsPortPathPrefixPut']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete environment of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentDelete: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEnvironmentDelete(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEnvironmentDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve environment of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEnvironmentGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEnvironmentGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Modify or create environment of an instance
         * @param {string} instanceId
         * @param {Array<InstanceEnvironmentVariable>} instanceEnvironmentVariable
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentPut: function (instanceId, instanceEnvironmentVariable, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEnvironmentPut(instanceId, instanceEnvironmentVariable, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEnvironmentPut']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove an environment variable of an instance
         * @param {string} instanceId
         * @param {string} variableName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNameDelete: function (instanceId, variableName, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEnvironmentVariableNameDelete(instanceId, variableName, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEnvironmentVariableNameDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve the value of an environment variable
         * @param {string} instanceId
         * @param {string} variableName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNameGet: function (instanceId, variableName, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEnvironmentVariableNameGet(instanceId, variableName, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEnvironmentVariableNameGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Set the value of an environment variable of an instance
         * @param {string} instanceId
         * @param {string} variableName
         * @param {InstancesInstanceIdConfigEnvironmentVariableNameGet200Response} instancesInstanceIdConfigEnvironmentVariableNameGet200Response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNamePut: function (instanceId, variableName, instancesInstanceIdConfigEnvironmentVariableNameGet200Response, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigEnvironmentVariableNamePut(instanceId, variableName, instancesInstanceIdConfigEnvironmentVariableNameGet200Response, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigEnvironmentVariableNamePut']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve labels of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigLabelsGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigLabelsGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigLabelsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve value of a specific label of an instance
         * @param {string} instanceId
         * @param {string} labelName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigLabelsLabelNameGet: function (instanceId, labelName, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigLabelsLabelNameGet(instanceId, labelName, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigLabelsLabelNameGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve bind mount of an instance
         * @param {string} instanceId
         * @param {string} containerPath
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsBindContainerPathGet: function (instanceId, containerPath, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigMountsBindContainerPathGet(instanceId, containerPath, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigMountsBindContainerPathGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve bind mounts of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsBindGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigMountsBindGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigMountsBindGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve volumes of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigMountsGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigMountsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve volumes mounts of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsVolumesGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigMountsVolumesGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigMountsVolumesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve volume mount of an instance
         * @param {string} instanceId
         * @param {string} volumeName
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsVolumesVolumeNameGet: function (instanceId, volumeName, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigMountsVolumesVolumeNameGet(instanceId, volumeName, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigMountsVolumesVolumeNameGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve connected networks of instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigNetworksGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigNetworksGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove connected network of instance
         * @param {string} instanceId
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksNetworkIdDelete: function (instanceId, networkId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigNetworksNetworkIdDelete(instanceId, networkId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigNetworksNetworkIdDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve connected network of instance
         * @param {string} instanceId
         * @param {string} networkId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksNetworkIdGet: function (instanceId, networkId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigNetworksNetworkIdGet(instanceId, networkId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigNetworksNetworkIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Connect instance to network
         * @param {string} instanceId
         * @param {InstancesInstanceIdConfigNetworksPostRequest} instancesInstanceIdConfigNetworksPostRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksPost: function (instanceId, instancesInstanceIdConfigNetworksPostRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigNetworksPost(instanceId, instancesInstanceIdConfigNetworksPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigNetworksPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete exposed ports of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsDelete: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigPortsDelete(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigPortsDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve exposed ports of an instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigPortsGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigPortsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove all published ports of an instance for the given transport_protocol
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolDelete: function (instanceId, transportProtocol, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigPortsTransportProtocolDelete(instanceId, transportProtocol, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigPortsTransportProtocolDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get published ports of an instance for the given transport_protocol
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolGet: function (instanceId, transportProtocol, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigPortsTransportProtocolGet(instanceId, transportProtocol, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigPortsTransportProtocolGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Remove instance port range that is mapped to the given host port range
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {string} hostPortRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete: function (instanceId, transportProtocol, hostPortRange, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete(instanceId, transportProtocol, hostPortRange, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve instance port range that is mapped to the given host port range
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {string} hostPortRange
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet: function (instanceId, transportProtocol, hostPortRange, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet(instanceId, transportProtocol, hostPortRange, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Set instance port range that is mapped to the given host port range
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {string} hostPortRange
         * @param {InstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest} instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut: function (instanceId, transportProtocol, hostPortRange, instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut(instanceId, transportProtocol, hostPortRange, instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update or create published ports of an instance for the given transport protocol
         * @param {string} instanceId
         * @param {TransportProtocol} transportProtocol
         * @param {Array<InstancePortMapping>} instancePortMapping
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolPut: function (instanceId, transportProtocol, instancePortMapping, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdConfigPortsTransportProtocolPut(instanceId, transportProtocol, instancePortMapping, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdConfigPortsTransportProtocolPut']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete a single instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdDelete: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdDelete(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Access an editor of an app
         * @param {string} instanceId
         * @param {number} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdEditorPortGet: function (instanceId, port, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdEditorPortGet(instanceId, port, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdEditorPortGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Obtain details of an App instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve logs of an Instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdLogsGet: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdLogsGet(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdLogsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Update or downgrade Instance to another App version
         * @param {string} instanceId
         * @param {InstancesInstanceIdPatchRequest} instancesInstanceIdPatchRequest
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdPatch: function (instanceId, instancesInstanceIdPatchRequest, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdPatch(instanceId, instancesInstanceIdPatchRequest, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdPatch']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Start an App instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdStartPost: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdStartPost(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdStartPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Stop an App instance
         * @param {string} instanceId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdStopPost: function (instanceId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.instancesInstanceIdStopPost(instanceId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['InstancesApi.instancesInstanceIdStopPost']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * InstancesApi - factory interface
 * @export
 */
export var InstancesApiFactory = function (configuration, basePath, axios) {
    var localVarFp = InstancesApiFp(configuration);
    return {
        /**
         *
         * @summary Create new instance of an installed App
         * @param {InstancesApiInstancesCreatePostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesCreatePost: function (requestParameters, options) {
            return localVarFp.instancesCreatePost(requestParameters.instancesCreatePostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Query all instances of one or all Apps
         * @param {InstancesApiInstancesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesGet: function (requestParameters, options) {
            if (requestParameters === void 0) { requestParameters = {}; }
            return localVarFp.instancesGet(requestParameters.app, requestParameters.version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Remove all passed through usb devices of an instance
         * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigDevicesUsbDelete(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve passed through usb devices of an instance
         * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigDevicesUsbGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete passed through usb device of the instance with the given port
         * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigDevicesUsbPortDelete(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve passed through usb device of the instance with the given port
         * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigDevicesUsbPortGet(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Pass through usb device with the given port to the instance
         * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigDevicesUsbPortPut: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigDevicesUsbPortPut(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve editors of an instance
         * @param {InstancesApiInstancesInstanceIdConfigEditorsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEditorsGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve an editor of an instance
         * @param {InstancesApiInstancesInstanceIdConfigEditorsPortGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEditorsPortGet(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
         * @param {InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortPathPrefixDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEditorsPortPathPrefixDelete(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Modify the path prefix used in the editor uri of an instance editor
         * @param {InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEditorsPortPathPrefixPut: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEditorsPortPathPrefixPut(requestParameters.instanceId, requestParameters.port, requestParameters.instancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete environment of an instance
         * @param {InstancesApiInstancesInstanceIdConfigEnvironmentDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEnvironmentDelete(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve environment of an instance
         * @param {InstancesApiInstancesInstanceIdConfigEnvironmentGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEnvironmentGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Modify or create environment of an instance
         * @param {InstancesApiInstancesInstanceIdConfigEnvironmentPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentPut: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEnvironmentPut(requestParameters.instanceId, requestParameters.instanceEnvironmentVariable, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Remove an environment variable of an instance
         * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNameDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEnvironmentVariableNameDelete(requestParameters.instanceId, requestParameters.variableName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve the value of an environment variable
         * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNameGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEnvironmentVariableNameGet(requestParameters.instanceId, requestParameters.variableName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Set the value of an environment variable of an instance
         * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigEnvironmentVariableNamePut: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigEnvironmentVariableNamePut(requestParameters.instanceId, requestParameters.variableName, requestParameters.instancesInstanceIdConfigEnvironmentVariableNameGet200Response, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve labels of an instance
         * @param {InstancesApiInstancesInstanceIdConfigLabelsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigLabelsGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigLabelsGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve value of a specific label of an instance
         * @param {InstancesApiInstancesInstanceIdConfigLabelsLabelNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigLabelsLabelNameGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigLabelsLabelNameGet(requestParameters.instanceId, requestParameters.labelName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve bind mount of an instance
         * @param {InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsBindContainerPathGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigMountsBindContainerPathGet(requestParameters.instanceId, requestParameters.containerPath, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve bind mounts of an instance
         * @param {InstancesApiInstancesInstanceIdConfigMountsBindGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsBindGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigMountsBindGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve volumes of an instance
         * @param {InstancesApiInstancesInstanceIdConfigMountsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigMountsGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve volumes mounts of an instance
         * @param {InstancesApiInstancesInstanceIdConfigMountsVolumesGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsVolumesGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigMountsVolumesGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve volume mount of an instance
         * @param {InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigMountsVolumesVolumeNameGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigMountsVolumesVolumeNameGet(requestParameters.instanceId, requestParameters.volumeName, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve connected networks of instance
         * @param {InstancesApiInstancesInstanceIdConfigNetworksGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigNetworksGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Remove connected network of instance
         * @param {InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksNetworkIdDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigNetworksNetworkIdDelete(requestParameters.instanceId, requestParameters.networkId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve connected network of instance
         * @param {InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksNetworkIdGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigNetworksNetworkIdGet(requestParameters.instanceId, requestParameters.networkId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Connect instance to network
         * @param {InstancesApiInstancesInstanceIdConfigNetworksPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigNetworksPost: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigNetworksPost(requestParameters.instanceId, requestParameters.instancesInstanceIdConfigNetworksPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete exposed ports of an instance
         * @param {InstancesApiInstancesInstanceIdConfigPortsDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigPortsDelete(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve exposed ports of an instance
         * @param {InstancesApiInstancesInstanceIdConfigPortsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigPortsGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Remove all published ports of an instance for the given transport_protocol
         * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigPortsTransportProtocolDelete(requestParameters.instanceId, requestParameters.transportProtocol, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get published ports of an instance for the given transport_protocol
         * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigPortsTransportProtocolGet(requestParameters.instanceId, requestParameters.transportProtocol, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Remove instance port range that is mapped to the given host port range
         * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete(requestParameters.instanceId, requestParameters.transportProtocol, requestParameters.hostPortRange, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve instance port range that is mapped to the given host port range
         * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet(requestParameters.instanceId, requestParameters.transportProtocol, requestParameters.hostPortRange, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Set instance port range that is mapped to the given host port range
         * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut(requestParameters.instanceId, requestParameters.transportProtocol, requestParameters.hostPortRange, requestParameters.instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update or create published ports of an instance for the given transport protocol
         * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPutRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdConfigPortsTransportProtocolPut: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdConfigPortsTransportProtocolPut(requestParameters.instanceId, requestParameters.transportProtocol, requestParameters.instancePortMapping, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete a single instance
         * @param {InstancesApiInstancesInstanceIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdDelete: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdDelete(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Access an editor of an app
         * @param {InstancesApiInstancesInstanceIdEditorPortGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdEditorPortGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdEditorPortGet(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Obtain details of an App instance
         * @param {InstancesApiInstancesInstanceIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve logs of an Instance
         * @param {InstancesApiInstancesInstanceIdLogsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdLogsGet: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdLogsGet(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Update or downgrade Instance to another App version
         * @param {InstancesApiInstancesInstanceIdPatchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdPatch: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdPatch(requestParameters.instanceId, requestParameters.instancesInstanceIdPatchRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Start an App instance
         * @param {InstancesApiInstancesInstanceIdStartPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdStartPost: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdStartPost(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Stop an App instance
         * @param {InstancesApiInstancesInstanceIdStopPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        instancesInstanceIdStopPost: function (requestParameters, options) {
            return localVarFp.instancesInstanceIdStopPost(requestParameters.instanceId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * InstancesApi - object-oriented interface
 * @export
 * @class InstancesApi
 * @extends {BaseAPI}
 */
var InstancesApi = /** @class */ (function (_super) {
    __extends(InstancesApi, _super);
    function InstancesApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Create new instance of an installed App
     * @param {InstancesApiInstancesCreatePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesCreatePost = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesCreatePost(requestParameters.instancesCreatePostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Query all instances of one or all Apps
     * @param {InstancesApiInstancesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesGet = function (requestParameters, options) {
        var _this = this;
        if (requestParameters === void 0) { requestParameters = {}; }
        return InstancesApiFp(this.configuration).instancesGet(requestParameters.app, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Remove all passed through usb devices of an instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigDevicesUsbDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigDevicesUsbDelete(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve passed through usb devices of an instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigDevicesUsbGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigDevicesUsbGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete passed through usb device of the instance with the given port
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigDevicesUsbPortDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigDevicesUsbPortDelete(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve passed through usb device of the instance with the given port
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigDevicesUsbPortGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigDevicesUsbPortGet(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Pass through usb device with the given port to the instance
     * @param {InstancesApiInstancesInstanceIdConfigDevicesUsbPortPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigDevicesUsbPortPut = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigDevicesUsbPortPut(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve editors of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEditorsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEditorsGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEditorsGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve an editor of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEditorsPortGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEditorsPortGet(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Remove the path prefix used in the editor uri of an instance editor, this will revert to the default behaviour (/v2/instances/{instance_id}/editor/{port})
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEditorsPortPathPrefixDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEditorsPortPathPrefixDelete(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Modify the path prefix used in the editor uri of an instance editor
     * @param {InstancesApiInstancesInstanceIdConfigEditorsPortPathPrefixPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEditorsPortPathPrefixPut = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEditorsPortPathPrefixPut(requestParameters.instanceId, requestParameters.port, requestParameters.instancesInstanceIdConfigEditorsPortPathPrefixPutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEnvironmentDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEnvironmentDelete(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEnvironmentGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEnvironmentGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Modify or create environment of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEnvironmentPut = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEnvironmentPut(requestParameters.instanceId, requestParameters.instanceEnvironmentVariable, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Remove an environment variable of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEnvironmentVariableNameDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEnvironmentVariableNameDelete(requestParameters.instanceId, requestParameters.variableName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve the value of an environment variable
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEnvironmentVariableNameGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEnvironmentVariableNameGet(requestParameters.instanceId, requestParameters.variableName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Set the value of an environment variable of an instance
     * @param {InstancesApiInstancesInstanceIdConfigEnvironmentVariableNamePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigEnvironmentVariableNamePut = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigEnvironmentVariableNamePut(requestParameters.instanceId, requestParameters.variableName, requestParameters.instancesInstanceIdConfigEnvironmentVariableNameGet200Response, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve labels of an instance
     * @param {InstancesApiInstancesInstanceIdConfigLabelsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigLabelsGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigLabelsGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve value of a specific label of an instance
     * @param {InstancesApiInstancesInstanceIdConfigLabelsLabelNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigLabelsLabelNameGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigLabelsLabelNameGet(requestParameters.instanceId, requestParameters.labelName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve bind mount of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsBindContainerPathGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigMountsBindContainerPathGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigMountsBindContainerPathGet(requestParameters.instanceId, requestParameters.containerPath, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve bind mounts of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsBindGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigMountsBindGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigMountsBindGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve volumes of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigMountsGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigMountsGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve volumes mounts of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsVolumesGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigMountsVolumesGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigMountsVolumesGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve volume mount of an instance
     * @param {InstancesApiInstancesInstanceIdConfigMountsVolumesVolumeNameGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigMountsVolumesVolumeNameGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigMountsVolumesVolumeNameGet(requestParameters.instanceId, requestParameters.volumeName, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve connected networks of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigNetworksGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigNetworksGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Remove connected network of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksNetworkIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigNetworksNetworkIdDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigNetworksNetworkIdDelete(requestParameters.instanceId, requestParameters.networkId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve connected network of instance
     * @param {InstancesApiInstancesInstanceIdConfigNetworksNetworkIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigNetworksNetworkIdGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigNetworksNetworkIdGet(requestParameters.instanceId, requestParameters.networkId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Connect instance to network
     * @param {InstancesApiInstancesInstanceIdConfigNetworksPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigNetworksPost = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigNetworksPost(requestParameters.instanceId, requestParameters.instancesInstanceIdConfigNetworksPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete exposed ports of an instance
     * @param {InstancesApiInstancesInstanceIdConfigPortsDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigPortsDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigPortsDelete(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve exposed ports of an instance
     * @param {InstancesApiInstancesInstanceIdConfigPortsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigPortsGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigPortsGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Remove all published ports of an instance for the given transport_protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigPortsTransportProtocolDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigPortsTransportProtocolDelete(requestParameters.instanceId, requestParameters.transportProtocol, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get published ports of an instance for the given transport_protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigPortsTransportProtocolGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigPortsTransportProtocolGet(requestParameters.instanceId, requestParameters.transportProtocol, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Remove instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigPortsTransportProtocolHostPortRangeDelete(requestParameters.instanceId, requestParameters.transportProtocol, requestParameters.hostPortRange, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangeGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigPortsTransportProtocolHostPortRangeGet(requestParameters.instanceId, requestParameters.transportProtocol, requestParameters.hostPortRange, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Set instance port range that is mapped to the given host port range
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigPortsTransportProtocolHostPortRangePut(requestParameters.instanceId, requestParameters.transportProtocol, requestParameters.hostPortRange, requestParameters.instancesInstanceIdConfigPortsTransportProtocolHostPortRangePutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update or create published ports of an instance for the given transport protocol
     * @param {InstancesApiInstancesInstanceIdConfigPortsTransportProtocolPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdConfigPortsTransportProtocolPut = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdConfigPortsTransportProtocolPut(requestParameters.instanceId, requestParameters.transportProtocol, requestParameters.instancePortMapping, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete a single instance
     * @param {InstancesApiInstancesInstanceIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdDelete = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdDelete(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Access an editor of an app
     * @param {InstancesApiInstancesInstanceIdEditorPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdEditorPortGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdEditorPortGet(requestParameters.instanceId, requestParameters.port, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Obtain details of an App instance
     * @param {InstancesApiInstancesInstanceIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve logs of an Instance
     * @param {InstancesApiInstancesInstanceIdLogsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdLogsGet = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdLogsGet(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Update or downgrade Instance to another App version
     * @param {InstancesApiInstancesInstanceIdPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdPatch = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdPatch(requestParameters.instanceId, requestParameters.instancesInstanceIdPatchRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Start an App instance
     * @param {InstancesApiInstancesInstanceIdStartPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdStartPost = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdStartPost(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Stop an App instance
     * @param {InstancesApiInstancesInstanceIdStopPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InstancesApi
     */
    InstancesApi.prototype.instancesInstanceIdStopPost = function (requestParameters, options) {
        var _this = this;
        return InstancesApiFp(this.configuration).instancesInstanceIdStopPost(requestParameters.instanceId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return InstancesApi;
}(BaseAPI));
export { InstancesApi };
/**
 * JobsApi - axios parameter creator
 * @export
 */
export var JobsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Retrieve a list of all pending/queued/running/failed/cancelled jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/jobs";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Cancel job or remove failed/successful/cancelled job from journal
         * @param {number} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsJobIdDelete: function (jobId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'jobId' is not null or undefined
                    assertParamExists('jobsJobIdDelete', 'jobId', jobId);
                    localVarPath = "/jobs/{job_id}"
                        .replace("{".concat("job_id", "}"), encodeURIComponent(String(jobId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Retrieve information for specific job_id
         * @param {number} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsJobIdGet: function (jobId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'jobId' is not null or undefined
                    assertParamExists('jobsJobIdGet', 'jobId', jobId);
                    localVarPath = "/jobs/{job_id}"
                        .replace("{".concat("job_id", "}"), encodeURIComponent(String(jobId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * JobsApi - functional programming interface
 * @export
 */
export var JobsApiFp = function (configuration) {
    var localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Retrieve a list of all pending/queued/running/failed/cancelled jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.jobsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['JobsApi.jobsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Cancel job or remove failed/successful/cancelled job from journal
         * @param {number} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsJobIdDelete: function (jobId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.jobsJobIdDelete(jobId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['JobsApi.jobsJobIdDelete']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Retrieve information for specific job_id
         * @param {number} jobId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsJobIdGet: function (jobId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.jobsJobIdGet(jobId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['JobsApi.jobsJobIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * JobsApi - factory interface
 * @export
 */
export var JobsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = JobsApiFp(configuration);
    return {
        /**
         *
         * @summary Retrieve a list of all pending/queued/running/failed/cancelled jobs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsGet: function (options) {
            return localVarFp.jobsGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Cancel job or remove failed/successful/cancelled job from journal
         * @param {JobsApiJobsJobIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsJobIdDelete: function (requestParameters, options) {
            return localVarFp.jobsJobIdDelete(requestParameters.jobId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Retrieve information for specific job_id
         * @param {JobsApiJobsJobIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        jobsJobIdGet: function (requestParameters, options) {
            return localVarFp.jobsJobIdGet(requestParameters.jobId, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
var JobsApi = /** @class */ (function (_super) {
    __extends(JobsApi, _super);
    function JobsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Retrieve a list of all pending/queued/running/failed/cancelled jobs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    JobsApi.prototype.jobsGet = function (options) {
        var _this = this;
        return JobsApiFp(this.configuration).jobsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Cancel job or remove failed/successful/cancelled job from journal
     * @param {JobsApiJobsJobIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    JobsApi.prototype.jobsJobIdDelete = function (requestParameters, options) {
        var _this = this;
        return JobsApiFp(this.configuration).jobsJobIdDelete(requestParameters.jobId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Retrieve information for specific job_id
     * @param {JobsApiJobsJobIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    JobsApi.prototype.jobsJobIdGet = function (requestParameters, options) {
        var _this = this;
        return JobsApiFp(this.configuration).jobsJobIdGet(requestParameters.jobId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return JobsApi;
}(BaseAPI));
export { JobsApi };
/**
 * ManifestsApi - axios parameter creator
 * @export
 */
export var ManifestsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get a specific manifest
         * @param {string} appName
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manifestsAppNameVersionGet: function (appName, version, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'appName' is not null or undefined
                    assertParamExists('manifestsAppNameVersionGet', 'appName', appName);
                    // verify required parameter 'version' is not null or undefined
                    assertParamExists('manifestsAppNameVersionGet', 'version', version);
                    localVarPath = "/manifests/{app_name}/{version}"
                        .replace("{".concat("app_name", "}"), encodeURIComponent(String(appName)))
                        .replace("{".concat("version", "}"), encodeURIComponent(String(version)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get a list of all manifests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manifestsGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/manifests";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * ManifestsApi - functional programming interface
 * @export
 */
export var ManifestsApiFp = function (configuration) {
    var localVarAxiosParamCreator = ManifestsApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get a specific manifest
         * @param {string} appName
         * @param {string} version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manifestsAppNameVersionGet: function (appName, version, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.manifestsAppNameVersionGet(appName, version, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['ManifestsApi.manifestsAppNameVersionGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get a list of all manifests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manifestsGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.manifestsGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['ManifestsApi.manifestsGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * ManifestsApi - factory interface
 * @export
 */
export var ManifestsApiFactory = function (configuration, basePath, axios) {
    var localVarFp = ManifestsApiFp(configuration);
    return {
        /**
         *
         * @summary Get a specific manifest
         * @param {ManifestsApiManifestsAppNameVersionGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manifestsAppNameVersionGet: function (requestParameters, options) {
            return localVarFp.manifestsAppNameVersionGet(requestParameters.appName, requestParameters.version, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get a list of all manifests
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        manifestsGet: function (options) {
            return localVarFp.manifestsGet(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * ManifestsApi - object-oriented interface
 * @export
 * @class ManifestsApi
 * @extends {BaseAPI}
 */
var ManifestsApi = /** @class */ (function (_super) {
    __extends(ManifestsApi, _super);
    function ManifestsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get a specific manifest
     * @param {ManifestsApiManifestsAppNameVersionGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManifestsApi
     */
    ManifestsApi.prototype.manifestsAppNameVersionGet = function (requestParameters, options) {
        var _this = this;
        return ManifestsApiFp(this.configuration).manifestsAppNameVersionGet(requestParameters.appName, requestParameters.version, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get a list of all manifests
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ManifestsApi
     */
    ManifestsApi.prototype.manifestsGet = function (options) {
        var _this = this;
        return ManifestsApiFp(this.configuration).manifestsGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return ManifestsApi;
}(BaseAPI));
export { ManifestsApi };
/**
 * SystemApi - axios parameter creator
 * @export
 */
export var SystemApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Get devices of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/system/devices";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get usb devices of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesUsbGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/system/devices/usb";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get usb device of system
         * @param {string} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesUsbPortGet: function (port, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'port' is not null or undefined
                    assertParamExists('systemDevicesUsbPortGet', 'port', port);
                    localVarPath = "/system/devices/usb/{port}"
                        .replace("{".concat("port", "}"), encodeURIComponent(String(port)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get architecture and operating system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfoGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/system/info";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get network adapters of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemNetworkAdaptersGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/system/network_adapters";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get network adapter of system
         * @param {string} networkAdapterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemNetworkAdaptersNetworkAdapterIdGet: function (networkAdapterId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'networkAdapterId' is not null or undefined
                    assertParamExists('systemNetworkAdaptersNetworkAdapterIdGet', 'networkAdapterId', networkAdapterId);
                    localVarPath = "/system/network_adapters/{network_adapter_id}"
                        .replace("{".concat("network_adapter_id", "}"), encodeURIComponent(String(networkAdapterId)));
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Check daemon availability and connectivity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPingGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/system/ping";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Get FLECS core and API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVersionGet: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/system/version";
                    localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    setSearchParams(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: toPathString(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
/**
 * SystemApi - functional programming interface
 * @export
 */
export var SystemApiFp = function (configuration) {
    var localVarAxiosParamCreator = SystemApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @summary Get devices of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemDevicesGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['SystemApi.systemDevicesGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get usb devices of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesUsbGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemDevicesUsbGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['SystemApi.systemDevicesUsbGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get usb device of system
         * @param {string} port
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesUsbPortGet: function (port, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemDevicesUsbPortGet(port, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['SystemApi.systemDevicesUsbPortGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get architecture and operating system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfoGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemInfoGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['SystemApi.systemInfoGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get network adapters of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemNetworkAdaptersGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemNetworkAdaptersGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['SystemApi.systemNetworkAdaptersGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get network adapter of system
         * @param {string} networkAdapterId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemNetworkAdaptersNetworkAdapterIdGet: function (networkAdapterId, options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemNetworkAdaptersNetworkAdapterIdGet(networkAdapterId, options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['SystemApi.systemNetworkAdaptersNetworkAdapterIdGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Check daemon availability and connectivity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPingGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemPingGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['SystemApi.systemPingGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get FLECS core and API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVersionGet: function (options) {
            var _a, _b, _c;
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs, localVarOperationServerIndex, localVarOperationServerBasePath;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.systemVersionGet(options)];
                        case 1:
                            localVarAxiosArgs = _d.sent();
                            localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                            localVarOperationServerBasePath = (_c = (_b = operationServerMap['SystemApi.systemVersionGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                            return [2 /*return*/, function (axios, basePath) { return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath); }];
                    }
                });
            });
        },
    };
};
/**
 * SystemApi - factory interface
 * @export
 */
export var SystemApiFactory = function (configuration, basePath, axios) {
    var localVarFp = SystemApiFp(configuration);
    return {
        /**
         *
         * @summary Get devices of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesGet: function (options) {
            return localVarFp.systemDevicesGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get usb devices of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesUsbGet: function (options) {
            return localVarFp.systemDevicesUsbGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get usb device of system
         * @param {SystemApiSystemDevicesUsbPortGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemDevicesUsbPortGet: function (requestParameters, options) {
            return localVarFp.systemDevicesUsbPortGet(requestParameters.port, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get architecture and operating system information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemInfoGet: function (options) {
            return localVarFp.systemInfoGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get network adapters of system
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemNetworkAdaptersGet: function (options) {
            return localVarFp.systemNetworkAdaptersGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get network adapter of system
         * @param {SystemApiSystemNetworkAdaptersNetworkAdapterIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemNetworkAdaptersNetworkAdapterIdGet: function (requestParameters, options) {
            return localVarFp.systemNetworkAdaptersNetworkAdapterIdGet(requestParameters.networkAdapterId, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Check daemon availability and connectivity
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemPingGet: function (options) {
            return localVarFp.systemPingGet(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get FLECS core and API version
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemVersionGet: function (options) {
            return localVarFp.systemVersionGet(options).then(function (request) { return request(axios, basePath); });
        },
    };
};
/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
var SystemApi = /** @class */ (function (_super) {
    __extends(SystemApi, _super);
    function SystemApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Get devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemDevicesGet = function (options) {
        var _this = this;
        return SystemApiFp(this.configuration).systemDevicesGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get usb devices of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemDevicesUsbGet = function (options) {
        var _this = this;
        return SystemApiFp(this.configuration).systemDevicesUsbGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get usb device of system
     * @param {SystemApiSystemDevicesUsbPortGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemDevicesUsbPortGet = function (requestParameters, options) {
        var _this = this;
        return SystemApiFp(this.configuration).systemDevicesUsbPortGet(requestParameters.port, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get architecture and operating system information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemInfoGet = function (options) {
        var _this = this;
        return SystemApiFp(this.configuration).systemInfoGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get network adapters of system
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemNetworkAdaptersGet = function (options) {
        var _this = this;
        return SystemApiFp(this.configuration).systemNetworkAdaptersGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get network adapter of system
     * @param {SystemApiSystemNetworkAdaptersNetworkAdapterIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemNetworkAdaptersNetworkAdapterIdGet = function (requestParameters, options) {
        var _this = this;
        return SystemApiFp(this.configuration).systemNetworkAdaptersNetworkAdapterIdGet(requestParameters.networkAdapterId, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Check daemon availability and connectivity
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemPingGet = function (options) {
        var _this = this;
        return SystemApiFp(this.configuration).systemPingGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get FLECS core and API version
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    SystemApi.prototype.systemVersionGet = function (options) {
        var _this = this;
        return SystemApiFp(this.configuration).systemVersionGet(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return SystemApi;
}(BaseAPI));
export { SystemApi };
//# sourceMappingURL=api.js.map